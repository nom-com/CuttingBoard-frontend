<<<<<<< HEAD
[{"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js":"1","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js":"2","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js":"3","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js":"4","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js":"5","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js":"6","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js":"7","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js":"8","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js":"9","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js":"10","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js":"11","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js":"12","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js":"13","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js":"14","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js":"15","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js":"16","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"17","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"18","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"19","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js":"20","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js":"21","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js":"22","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js":"23","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js":"24","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js":"25","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js":"26","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js":"27","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js":"28","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js":"29","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js":"30","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js":"31","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js":"32","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js":"33","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js":"34","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js":"35","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js":"36","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js":"37","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js":"38"},{"size":457,"mtime":1608587344002,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":2190,"mtime":1609432864441,"results":"42","hashOfConfig":"40"},{"size":1166,"mtime":1609641148316,"results":"43","hashOfConfig":"40"},{"size":164,"mtime":1609192482162,"results":"44","hashOfConfig":"40"},{"size":971,"mtime":1609371884221,"results":"45","hashOfConfig":"40"},{"size":167,"mtime":1609192482178,"results":"46","hashOfConfig":"40"},{"size":182,"mtime":1609192482180,"results":"47","hashOfConfig":"40"},{"size":322,"mtime":1608587343997,"results":"48","hashOfConfig":"40"},{"size":1547,"mtime":1609608204137,"results":"49","hashOfConfig":"40"},{"size":548,"mtime":1609396807066,"results":"50","hashOfConfig":"40"},{"size":2822,"mtime":1609646132721,"results":"51","hashOfConfig":"40"},{"size":1048,"mtime":1609364795628,"results":"52","hashOfConfig":"40"},{"size":2914,"mtime":1609281326114,"results":"53","hashOfConfig":"40"},{"size":11335,"mtime":1609634710303,"results":"54","hashOfConfig":"40"},{"size":1543,"mtime":1609630075415,"results":"55","hashOfConfig":"40"},{"size":6381,"mtime":1609640314765,"results":"56","hashOfConfig":"40"},{"size":9074,"mtime":1609640240979,"results":"57","hashOfConfig":"40"},{"size":10432,"mtime":1609646260289,"results":"58","hashOfConfig":"40"},{"size":821,"mtime":1609646130907,"results":"59","hashOfConfig":"40"},{"size":2399,"mtime":1609627655672,"results":"60","hashOfConfig":"40"},{"size":640,"mtime":1609364795625,"results":"61","hashOfConfig":"40"},{"size":495,"mtime":1609630075412,"results":"62","hashOfConfig":"40"},{"size":963,"mtime":1608587343999,"results":"63","hashOfConfig":"40"},{"size":4760,"mtime":1609432864442,"results":"64","hashOfConfig":"40"},{"size":996,"mtime":1609432864461,"results":"65","hashOfConfig":"40"},{"size":4483,"mtime":1609432864461,"results":"66","hashOfConfig":"40"},{"size":4712,"mtime":1609396807058,"results":"67","hashOfConfig":"40"},{"size":2246,"mtime":1609396807056,"results":"68","hashOfConfig":"40"},{"size":649,"mtime":1609608204142,"results":"69","hashOfConfig":"40"},{"size":53,"mtime":1609364795609,"results":"70","hashOfConfig":"40"},{"size":1156,"mtime":1609645416389,"results":"71","hashOfConfig":"40"},{"size":203,"mtime":1609608204140,"results":"72","hashOfConfig":"40"},{"size":1275,"mtime":1609630075434,"results":"73","hashOfConfig":"40"},{"size":773,"mtime":1609630075431,"results":"74","hashOfConfig":"40"},{"size":3233,"mtime":1609640740950,"results":"75","hashOfConfig":"40"},{"size":463,"mtime":1609635113790,"results":"76","hashOfConfig":"40"},{"size":5053,"mtime":1609646611145,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1u01klj",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js",[],["169","170"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js",["171","172","173","174"],"import React from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport LoginForm from \"../components/LoginForm\";\nimport Container from \"@material-ui/core/Container\";\n\nconst Landing = () => {\n  const [authState, authDispatch] = useAuthContext();\n\n  return (\n    <div className='page-body-content'>\n      <Container>\n        {authState.username ? (\n          <div>Welcome back, {authState.username}</div>\n        ) : (\n          <LoginForm />\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Landing;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js",["175"],"import React, { useEffect, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst dummyRecipeObj = {\n  id: 12,\n  imageLocation: \"https://i2.wp.com/eugeniekitchen.com/wp-content/uploads/2012/12/souffle.jpg?zoom=2.625&w=205\",\n  title: \"The Perfect Souffle\",\n  description: \"Souffle is just a matter of time. The time gap from the oven to the table. There is a famous French saying: Le soufflé n’attend pas, on attend le soufflé. Meaning le soufflé doesn’t wait, we (the guests) wait. But today I will not wait for le soufflé, I will make the soufflé.\",\n  createdBy: \"Nom.com Selects\",\n  creationDate: \"12/25/2020\",\n  category: \"French Cuisine\",\n  instructions: [\"Give Up\", \"Order Fast Food\", \"????\", \"Profit\"],\n  ingredients: [{\"ingredient\": \"Butter\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Flour\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Salt\", \"amount\": \"1/2 tsp(2.5mL)\"}, {\"ingredient\": \"Milk\", \"amount\": \"3/4 cup (175mL)\"}, {\"ingredient\": \"Egg Yolk(s)\", \"amount\": \"4\"}, {\"ingredient\": \"Egg White(s)\", \"amount\": \"2\", }, {\"ingredient\": \"Cream of Tartar\", \"amount\": \"1/4 tsp(1.25mL)\"}]\n};\n\n//Displays a chosen Recipe with id matching www.url.com/recipe/{id}\nconst Recipe = (props) => {\n  //Contains all Relevant Data for Recipe Display\n  const [recipeData, setRecipeData] = useState({id: null, imageLocation: \"\", title: \"\", description: \"\", createdBy: \"\", creationDate: \"\", category: \"\", instructions: [], ingredients: []});\n  \n  //  useEffect to API get by ID etc...\n  useEffect(() => {\n    //API Call using matching parameter\n    //setRecipeData(doGetRecipe(props.match.params.id));\n\n    //TEMPORARY: Set Dummy Data\n    setRecipeData(dummyRecipeObj);\n\n  }, [props] /*Empty Array Ensures Side Effects only occur once, might needs props for dependency*/\n  );\n\n  //When finished, pull apart created JSON obj and display each component\n  return (\n    <div className='page-body-content' onLoad={useEffect}>\n      <Paper>\n        <h1>{recipeData.title}</h1>\n        <h3>Recipe #{recipeData.id}</h3>\n        <strong>Created by:</strong> {recipeData.createdBy}\n        <br/>{recipeData.creationDate}\n        <br/><strong>Category:</strong> {recipeData.category}\n        <br/><img src={recipeData.imageLocation}/>\n        <h1>Description:</h1>\n        {recipeData.description}\n        <div id=\"ingredients-list\">\n        <h1>Ingredients</h1>\n          <ul>\n          {recipeData.ingredients.map(ingredient => (\n            <li key={ingredient.ingredient}>\n              {ingredient.amount} {ingredient.ingredient}\n            </li>\n          ))}\n          </ul>\n        </div>\n        <div id=\"instructions-list\">\n        <h1>Instructions</h1>\n          <ol>\n            {recipeData.instructions.map(instruction => (\n            <li>\n              {(instruction)}\n            </li>\n          ))}\n          </ol>\n        </div>\n      </Paper>\n    </div>\n  );\n};\n\nexport default Recipe;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js",["176","177"],"import React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { SET_USER } from \"../utils/actions\";\nimport AuthService from \"../services/auth.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreContext } from \"../utils/GlobalState\";\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(8, \"Username must contain at least 8 characters\")\n    .required(\"Enter a username\"),\n  email: Yup.string()\n    .email(\"Enter a valid email\")\n    .required(\"Email is required\"),\n  firstName: Yup.string().required(\"Required\"),\n  lastName: Yup.string().required(\"Required\"),\n  password: Yup.string()\n    .min(8, \"Password must contain at least 8 characters\")\n    .required(\"Enter your password\"),\n  confirmPassword: Yup.string()\n    .required(\"Confirm your password\")\n    .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\n});\n\nconst SignUpForm = props => {\n  const [state, dispatch] = useStoreContext();\n  const history = useHistory();\n\n  const { username, email, firstName, lastName, password, editForm } = props;\n\n  const checkUniqueUsername = (usernameTest, setFieldError, setStatus) => {\n    if (usernameTest.length < 8) {\n      setFieldError(\"username\", \"Username must contain at least 8 characters\");\n      return false;\n    }\n    AuthService.register(usernameTest)\n      .then(res => {\n        console.log(res);\n      })\n      .catch(err => {\n        if (err.response) {\n          if (err.response.data === \"User already exists.\") {\n            setFieldError(\"username\", \"That username already exists.\");\n            return false;\n          } else {\n            setStatus({ username: \"Looks good!\" });\n            return true;\n          }\n        }\n      });\n  };\n\n  const signUpSubmit = (\n    values,\n    { setSubmitting, resetForm, setFieldError, setStatus }\n  ) => {\n    // USERNAME IS UNIQUE, FINALIZE CALL TO API\n    AuthService.register(\n      values.username,\n      values.password,\n      values.email,\n      values.firstName,\n      values.lastName\n    )\n      .then(res => {\n        if (res.status === 201) {\n          AuthService.setCurrentUser({\n            ...res.data,\n            accessToke: res.headers.token,\n          });\n          dispatch({\n            type: SET_USER,\n            user: res.data,\n          });\n          history.replace(\"/\");\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.response) {\n          if (err.response.data === \"User already exists.\") {\n            setFieldError(\"username\", \"That username already exists.\");\n          }\n          if (err.response.data === \"Email already exists.\") {\n            setFieldError(\"email\", \"That email already exists.\");\n          }\n          setSubmitting(false);\n        }\n      });\n  };\n\n  return (\n    <div className='page-body-content'>\n      <Formik\n        initialValues={{\n          username: username || \"\",\n          email: email || \"\",\n          firstName: firstName || \"\",\n          lastName: lastName || \"\",\n          password: password || \"\",\n          confirmPassword: \"\",\n        }}\n        initialTouched={{\n          username: false,\n          email: false,\n          firstName: false,\n          lastName: false,\n          password: false,\n          confirmPassword: false,\n        }}\n        initialErrors={{\n          username: false,\n          email: false,\n          firstName: false,\n          lastName: false,\n          password: false,\n          confirmPassword: false,\n        }}\n        initialStatus={{\n          username: false,\n          email: false,\n          firstName: false,\n          lastName: false,\n          password: false,\n          confirmPassword: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={signUpSubmit}>\n        {({\n          values,\n          touched,\n          status,\n          errors,\n          handleChange,\n          handleBlur,\n          setFieldError,\n          setStatus,\n          isSubmitting,\n        }) => (\n          <Form\n            noValidate\n            autoComplete='off'>\n            <Paper style={{\n              maxWidth: 600,\n              margin: \"auto\",\n              marginTop: 30,\n              padding: 20,\n            }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h2'>Create an Account</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.username && Boolean(errors.username)}\n                    id='username'\n                    label='Username'\n                    value={values.username}\n                    placeholder='foodie77'\n                    helperText={\n                      touched.username && status.username\n                        ? status.username\n                        : errors.username\n                        ? errors.username\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                  <Grid container item justify='flex-end' alignItems='flex-end'>\n                    <Button\n                      onClick={() =>\n                        checkUniqueUsername(\n                          values.username,\n                          setFieldError,\n                          setStatus\n                        )\n                      }\n                      variant='outlined'\n                      color='default'\n                      endIcon={<Icon>check</Icon>}>\n                      Check\n                    </Button>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.email && Boolean(errors.email)}\n                    id='email'\n                    label='Email'\n                    value={values.email}\n                    placeholder='diners.driveins@foodnetwork.net'\n                    helperText={\n                      touched.email && errors.email ? errors.email : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.firstName && Boolean(errors.firstName)}\n                    id='firstName'\n                    label='First Name'\n                    value={values.firstName}\n                    placeholder='Guy'\n                    helperText={\n                      touched.firstName && errors.firstName\n                        ? errors.firstName\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.lastName && Boolean(errors.lastName)}\n                    id='lastName'\n                    label='Last Name'\n                    value={values.lastName}\n                    placeholder='Fieri'\n                    helperText={\n                      touched.lastName && errors.lastName\n                        ? errors.lastName\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.password && Boolean(errors.password)}\n                    id='password'\n                    label='Password'\n                    value={values.password}\n                    type='password'\n                    placeholder=''\n                    helperText={\n                      touched.password && errors.password\n                        ? errors.password\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={\n                      touched.confirmPassword && Boolean(errors.confirmPassword)\n                    }\n                    id='confirmPassword'\n                    label='Confirm Password'\n                    value={values.confirmPassword}\n                    type='password'\n                    placeholder=''\n                    helperText={\n                      touched.confirmPassword && errors.confirmPassword\n                        ? errors.confirmPassword\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    color='default'\n                    disabled={isSubmitting}\n                    endIcon={<Icon>send</Icon>}>\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js",["178"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemLink from \"../components/ListItemLink\";\nimport Logout from \"../components/Logout\";\nimport { useStoreContext } from \"../utils/GlobalState\";\n\nconst Nav = () => {\n  const [state, dispatch] = useStoreContext();\n  return (\n    <Grid\n      container\n      direction='row'\n      justify='flex-start'\n      alignItems='center'\n      p={5}>\n      <Grid item>\n        <ListItemLink to='/' primary='Home' />\n      </Grid>\n      <Grid item>\n        <ListItemLink to='/recipe/12' primary='Recipe' />\n      </Grid>\n      <Grid item>\n        <ListItemLink to='/search' primary='Search' />\n      </Grid>\n      {state.user ? (\n        <React.Fragment>\n          {state.user.admin ? (\n            <Grid item>\n            <ListItemLink to='/admin' primary='Admin' />\n          </Grid>\n          ) : (\n            <React.Fragment></React.Fragment>\n          )}\n          <Grid item>\n            <ListItemLink to='/favorites' primary='Favorites' />\n          </Grid>\n          <Grid item>\n            <ListItemLink to='/user-account' primary='User Account' />\n          </Grid>\n          <Grid item>\n            <Logout />\n          </Grid>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n\n        <Grid item>\n          <ListItemLink to='/login' primary='Login' />\n        </Grid>\n              <Grid item>\n              <ListItemLink to='/signup' primary='Signup' />\n            </Grid>\n        </React.Fragment>\n      )}\n    </Grid>\n  );\n};\n\nexport default Nav;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",["179"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SET_RECIPE_DETAIL } from \"../../utils/actions\";\nimport CategoryService from \"../../services/category.service\";\nimport DebugData from \"../DebugData\";\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(5, \"Title must contain at least 5 characters\")\n    .required(\"Enter a recipe title\"),\n  imageLocation: Yup.string(),\n  description: Yup.string().required(\"Required\"),\n  isPublic: Yup.boolean(),\n  category: Yup.string().required(\"Select a recipe category\"),\n  categoryId: Yup.number(),\n});\n\nconst RecipeForm = props => {\n  const [state, dispatch] = useStoreContext();\n  const [recipeCategory, setRecipeCategory] = useState([]);\n\n  const debug = false;\n  const {\n    editForm,\n    title,\n    imageLocation,\n    description,\n    isPublic,\n    category,\n    navigateOnSubmit\n  } = props;\n\n  const recipeSubmit = (values, { setSubmitting }) => {\n    dispatch({\n      type: SET_RECIPE_DETAIL,\n      recipeDetail: values,\n    });\n    setSubmitting(false);\n    navigateOnSubmit(\"right\")\n  };\n\n  const capitalize = s => {\n    if (typeof s !== \"string\") return \"\";\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  };\n\n  const getCategories = () => {\n    CategoryService.getAllCategories()\n      .then(res => {\n        console.log(res);\n        if (res.data.length > 0) {\n          let categoryArr = res.data.map(categoryObj => {\n            return {\n              value: categoryObj.category,\n              label: capitalize(categoryObj.category),\n              id: categoryObj.id,\n            };\n          });\n          setRecipeCategory(categoryArr);\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  return (\n    <div className='page-body-content'>\n      <Formik\n        initialValues={{\n          title: title || \"\",\n          imageLocation: imageLocation || \"\",\n          description: description || \"\",\n          isPublic: isPublic || false,\n          category: category || \"\",\n        }}\n        initialTouched={{\n          title: false,\n          imageLocation: false,\n          description: false,\n          isPublic: false,\n          category: false,\n        }}\n        initialErrors={{\n          title: false,\n          imageLocation: false,\n          description: false,\n          isPublic: false,\n          category: false,\n        }}\n        initialStatus={{\n          title: false,\n          imageLocation: false,\n          description: false,\n          isPublic: false,\n          category: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={recipeSubmit}>\n        {({\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <Form noValidate autoComplete='off'>\n            <Paper\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h4'>\n                    {editForm ? \"Edit Recipe\" : \"Create Recipe\"}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.title && Boolean(errors.title)}\n                    id='title'\n                    label='Title'\n                    value={values.title}\n                    placeholder='Brown Butter Chicken'\n                    helperText={\n                      touched.title && errors.title ? errors.title : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    select\n                    id='category'\n                    name='category'\n                    label='Select a Category'\n                    margin='dense'\n                    variant='outlined'\n                    error={touched.category && Boolean(errors.category)}\n                    onChange={handleChange}\n                    value={values.category}\n                    helperText={\n                      touched.category && errors.category\n                        ? errors.category\n                        : \" \"\n                    }\n                    fullWidth>\n                    {recipeCategory.map(option => (\n                      <MenuItem key={option.value} value={option.id}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={\n                      touched.imageLocation && Boolean(errors.imageLocation)\n                    }\n                    id='imageLocation'\n                    label='Image URL'\n                    value={values.imageLocation}\n                    helperText={\n                      touched.imageLocation && errors.imageLocation\n                        ? errors.imageLocation\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.description && Boolean(errors.description)}\n                    id='description'\n                    label='Description'\n                    multiline\n                    rows={4}\n                    placeholder='A delicious and savory take on the classic...'\n                    value={values.description}\n                    helperText={\n                      touched.description && errors.description\n                        ? errors.description\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={values.isPublic}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        name='isPublic'\n                        inputProps={{ \"aria-label\": \"make public or private\" }}\n                      />\n                    }\n                    label={\n                      values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n                </Grid>\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    disabled={isSubmitting}\n                    endIcon={<NavigateNextIcon />}>\n                    Next\n                  </Button>\n                </Grid>\n              </Grid>\n              {debug && (\n                <DebugData values={state.ingredients} errors={errors} />\n              )}\n            </Paper>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default RecipeForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",["180","181"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js",["182","183","184","185"],"import React, {useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport {SET_USER} from \"../utils/actions\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport AuthService from \"../services/auth.service\";\n\nconst LoginForm = () => {\n\n  //State Storage\n  const [state, dispatch] = useStoreContext();\n  //Temporary storage for the user form\n  const [userForm, setUserForm] = useState({username: \"\", password: \"\"});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n\n    //Updated Login Function\n    const handleLogin = (username, password) => {\n        AuthService.login(username, password)\n          .then(res => {\n            console.log(res);\n            res.status === 200 && AuthService.setCurrentUser({...res.data, accessToken: res.headers.token }) \n            res.status === 200 && dispatch({\n              type: SET_USER,\n              user: res.data\n            });\n            console.log(AuthService.getCurrentUser())\n          })\n          .catch(err => {\n              console.log(err);\n              //Displays Error Message\n              setErrorMessage(\"Incorrect Username or Password\");\n            });\n      };\n\n  //Invokes Login Helper Function\n  const handleSubmit = (event) => {\n    //Disables Page Reload onSubmit\n    event.preventDefault();\n    handleLogin(userForm.username, userForm.password);\n\n    const handleFormUpdate = (event, value) => {\n        setUserForm({...userForm, value: event.target.value})\n    }\n}\n  return (\n    <div id=\"login-form\">\n        <form>\n            <h1>Login</h1>\n            {(errorMessage != \"\") ? (<div className=\"error-message\">{errorMessage}</div>) : \"\"}\n            <div className=\"form-group\">\n                <TextField name=\"username\" id=\"username\" value={userForm.username} onChange={e => setUserForm({...userForm, username: e.target.value})}label=\"Username\"/>\n            </div>\n            <div className=\"form-group\">\n                <TextField type=\"password\" name=\"password\" id=\"password\" value={userForm.password} onChange={e => setUserForm({...userForm, password: e.target.value})} label=\"Password\"/>\n            </div>\n            <Button\n                onClick={handleSubmit}>\n                Login\n            </Button>\n        </form>\n    </div>\n  );\n};\n\nexport default LoginForm;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js",["186"],"import axios from \"axios\";\n\nexport default {\n  /* baseURL: \"http://\",\n  \n    TODO create API Object methods\n    \n    doLogin: function(loginObj) {\n        return axios.post(this.baseURL + \"/login\", loginObj )\n    }\n    */\n\n   doLogin: async function (userData) {\n     return await new Promise((resolve, reject) => {\n       //Simulate server request speed with 200ms ping\n      setTimeout(() => {\n        //Dummy Data for Testing until Back-end is finished\n        if (userData.username === \"a\" && userData.password === \"a\")\n        {\n          resolve();\n        }\n        else\n        {\n          reject();\n        }\n      }, 200)\n     })\n  }\n};\n",["187","188"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js",["189"],"import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AuthService from \"../services/auth.service\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {UNSET_USER} from \"../utils/actions\";\n\nconst Logout = () => {\n    const [state, dispatch] = useStoreContext();\n    \n    const handleLogout = () => {\n        AuthService.logout();\n        dispatch({\n          type: UNSET_USER\n        });\n      }\n\n    return (\n        <Button onClick={() => handleLogout}>Logout</Button>\n    )\n}\n\nexport default Logout;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js",["190"],"import React, { useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TrashIcon from \"@material-ui/icons/Delete\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { Link } from \"react-router-dom\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { SET_FAVORITES, LOADING } from \"../utils/actions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst FavoritesTable = () => {\n  const [state, dispatch] = useStoreContext();\n\n  const favoriteRecipes = [\n    {\n      id: 0,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"soup\",\n      public: true,\n    },\n    {\n      id: 2,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"pasta\",\n      public: false,\n    },\n    {\n      id: 3,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"dessert\",\n      public: true,\n    },\n  ];\n\n  //\n  const setFavorites = () => {\n    dispatch({ type: LOADING, loading: true });\n    setTimeout(function () {\n      dispatch({\n        type: SET_FAVORITES,\n        favorites: favoriteRecipes,\n      });\n    }, 1500);\n  };\n\n  // WILL BE AN API CALL\n  const removeFavorite = id => {\n    const shorterFavs = state.favorites.filter(fav => fav.id !== id);\n    dispatch({\n      type: SET_FAVORITES,\n      favorites: shorterFavs,\n    });\n  };\n\n  useEffect(() => {\n    setFavorites();\n  }, []);\n\n  return (\n    <React.Fragment>\n      {state.loading ? (\n        <Grid container item direction='row' justify='center'>\n          <Grid item>\n            <CircularProgress color='secondary' />\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid container item direction='row' justify='center'>\n          {state.favorites.length > 0 ? (\n            <Grid item xs={12}>\n              <Fade in={!state.loading}>\n                <TableContainer component={Paper}>\n                  <Table aria-label='simple table'>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Image</TableCell>\n                        <TableCell>Title</TableCell>\n                        <TableCell>Category</TableCell>\n                        <TableCell>Public/Private</TableCell>\n                        <TableCell>Actions</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {state.favorites.map(recipe => (\n                        <TableRow key={recipe.id}>\n                          <TableCell component='th' scope='row'>\n                            <Tooltip title='View Recipe'>\n                              <Link to={`/recipe/${recipe.id}`}>\n                                <img src={recipe.img} alt='placeholder' />\n                              </Link>\n                            </Tooltip>\n                          </TableCell>\n                          <TableCell>{recipe.title}</TableCell>\n                          <TableCell>{recipe.category}</TableCell>\n                          <TableCell>\n                            {recipe.public ? \"public\" : \"private\"}\n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title='Remove from Favorites'>\n                              <IconButton\n                                onClick={() => removeFavorite(recipe.id)}>\n                                <TrashIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Fade>\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item>\n                <Typography variant='subtitle1'>\n                  no favorite recipes found\n                </Typography>\n                {/* TO BE DELETED */}\n                <button onClick={() => setFavorites()}>\n                  POPULATE DUMMY DATA\n                </button>\n              </Grid>\n            </React.Fragment>\n          )}\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default FavoritesTable;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js",["191"],"import React, { useEffect } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteButton from \"@material-ui/icons/Delete\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { SET_SHOPPING_LIST, LOADING } from \"../utils/actions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nexport default function CheckboxList() {\n  const [state, dispatch] = useStoreContext();\n\n  const dummyShoppingListData = [\n    {\n      id: 0,\n      ingredientName: \"Garlic\",\n      checked: false,\n    },\n    {\n      id: 2,\n      ingredientName: \"Parmesan\",\n      checked: true,\n    },\n    {\n      id: 3,\n      ingredientName: \"Salt\",\n      checked: false,\n    },\n  ];\n\n  const setShoppingList = () => {\n    dispatch({ type: LOADING, loading: true });\n    setTimeout(function () {\n      dispatch({\n        type: SET_SHOPPING_LIST,\n        shoppingList: dummyShoppingListData,\n      });\n    }, 1500);\n  };\n\n  // WILL BE AN API CALL\n  const removeFromList = id => {\n    const shorterList = state.shoppingList.filter(item => item.id !== id);\n    dispatch({\n      type: SET_SHOPPING_LIST,\n      shoppingList: shorterList,\n    });\n  };\n\n  useEffect(() => {\n    setShoppingList();\n  }, []);\n\n  const handleToggle = value => () => {\n    value.checked = !value.checked;\n    const updateShoppingList = state.shoppingList.map(item =>\n      item.id === value.id ? value : item\n    );\n\n    dispatch({\n      type: SET_SHOPPING_LIST,\n      shoppingList: updateShoppingList,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {state.loading ? (\n        <Grid container item direction='row' justify='center'>\n          <Grid item>\n            <CircularProgress color='secondary' />\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid container item direction='row' justify='center'>\n          {state.shoppingList.length > 0 ? (\n            <Grid item xs={12}>\n              <Fade in={!state.loading}>\n                <List>\n                  {state.shoppingList.map((value, index) => (\n                    <ListItem\n                      key={value.id}\n                      role={undefined}\n                      dense\n                      button\n                      onClick={handleToggle(value)}>\n                      <ListItemIcon>\n                        <Checkbox\n                          edge='start'\n                          checked={value.checked}\n                          tabIndex={-1}\n                          disableRipple\n                          inputProps={{\n                            \"aria-labelledby\": `checkbox-list-label-${value.id}`,\n                          }}\n                        />\n                      </ListItemIcon>\n                      <ListItemText\n                        id={`checkbox-list-label-${value.id}`}\n                        primary={`${value.ingredientName}`}\n                      />\n                      <ListItemSecondaryAction>\n                        <Tooltip title='Delete from list'>\n                          <IconButton\n                            edge='end'\n                            aria-label='comments'\n                            onClick={() => removeFromList(value.id)}>\n                            <DeleteButton />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </Fade>\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item>\n                <Typography variant='subtitle1'>\n                  No items found in your shopping list\n                </Typography>\n                {/* TO BE DELETED */}\n                <button onClick={() => setShoppingList()}>\n                  POPULATE DUMMY DATA\n                </button>\n              </Grid>\n            </React.Fragment>\n          )}\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n}\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js",["192"],"import RecipeGlanceCard from \"../components/RecipeGlanceCard\";\nimport React, {useEffect} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { SET_RECOMMENDED_RECIPES, LOADING } from \"../utils/actions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst dummyRecipeArray = [{\n    id: 12,\n    imageLocation: \"https://i2.wp.com/eugeniekitchen.com/wp-content/uploads/2012/12/souffle.jpg?zoom=2.625&w=205\",\n    title: \"The Perfect Souffle\",\n    description: \"Souffle is just a matter of time. The time gap from the oven to the table. There is a famous French saying: Le soufflé n’attend pas, on attend le soufflé. Meaning le soufflé doesn’t wait, we (the guests) wait. But today I will not wait for le soufflé, I will make the soufflé.\",\n    createdBy: \"Nom.com Selects\",\n    creationDate: \"12/25/2020\",\n    category: \"French Cuisine\",\n    instructions: [\"Give Up\", \"Order Fast Food\", \"????\", \"Profit\"],\n    ingredients: [{\"ingredient\": \"Butter\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Flour\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Salt\", \"amount\": \"1/2 tsp(2.5mL)\"}, {\"ingredient\": \"Milk\", \"amount\": \"3/4 cup (175mL)\"}, {\"ingredient\": \"Egg Yolk(s)\", \"amount\": \"4\"}, {\"ingredient\": \"Egg White(s)\", \"amount\": \"2\", }, {\"ingredient\": \"Cream of Tartar\", \"amount\": \"1/4 tsp(1.25mL)\"}]\n  }, \n  {\n    id: 12,\n    imageLocation: \"https://i2.wp.com/eugeniekitchen.com/wp-content/uploads/2012/12/souffle.jpg?zoom=2.625&w=205\",\n    title: \"The Perfect Souffle\",\n    description: \"Souffle is just a matter of time. The time gap from the oven to the table. There is a famous French saying: Le soufflé n’attend pas, on attend le soufflé. Meaning le soufflé doesn’t wait, we (the guests) wait. But today I will not wait for le soufflé, I will make the soufflé.\",\n    createdBy: \"Nom.com Selects\",\n    creationDate: \"12/25/2020\",\n    category: \"French Cuisine\",\n    instructions: [\"Give Up\", \"Order Fast Food\", \"????\", \"Profit\"],\n    ingredients: [{\"ingredient\": \"Butter\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Flour\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Salt\", \"amount\": \"1/2 tsp(2.5mL)\"}, {\"ingredient\": \"Milk\", \"amount\": \"3/4 cup (175mL)\"}, {\"ingredient\": \"Egg Yolk(s)\", \"amount\": \"4\"}, {\"ingredient\": \"Egg White(s)\", \"amount\": \"2\", }, {\"ingredient\": \"Cream of Tartar\", \"amount\": \"1/4 tsp(1.25mL)\"}]\n  },\n  {\n    id: 12,\n    imageLocation: \"https://i2.wp.com/eugeniekitchen.com/wp-content/uploads/2012/12/souffle.jpg?zoom=2.625&w=205\",\n    title: \"The Perfect Souffle\",\n    description: \"Souffle is just a matter of time. The time gap from the oven to the table. There is a famous French saying: Le soufflé n’attend pas, on attend le soufflé. Meaning le soufflé doesn’t wait, we (the guests) wait. But today I will not wait for le soufflé, I will make the soufflé.\",\n    createdBy: \"Nom.com Selects\",\n    creationDate: \"12/25/2020\",\n    category: \"French Cuisine\",\n    instructions: [\"Give Up\", \"Order Fast Food\", \"????\", \"Profit\"],\n    ingredients: [{\"ingredient\": \"Butter\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Flour\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Salt\", \"amount\": \"1/2 tsp(2.5mL)\"}, {\"ingredient\": \"Milk\", \"amount\": \"3/4 cup (175mL)\"}, {\"ingredient\": \"Egg Yolk(s)\", \"amount\": \"4\"}, {\"ingredient\": \"Egg White(s)\", \"amount\": \"2\", }, {\"ingredient\": \"Cream of Tartar\", \"amount\": \"1/4 tsp(1.25mL)\"}]\n  }];\n\nconst RecipeGlanceFrame = () => {\n\n    \n  const [state, dispatch] = useStoreContext();\n\n  const setRecommended = () => {\n    dispatch({ type: LOADING, loading: true });\n    setTimeout(function () {\n      dispatch({\n        type: SET_RECOMMENDED_RECIPES,\n        recipes: dummyRecipeArray,\n      });\n    }, 1490);\n  };\n\n  useEffect(() => {\n    setRecommended();\n  }, []);\n\n    return (\n        <div>\n            {state.loading ? (\n                <Grid container item direction='row' justify='center'>\n                <Grid item>\n                    <CircularProgress color='secondary' />\n                </Grid>\n                </Grid>\n            ) : (\n            <Grid\n            container\n            direction='row'\n            justify='flex-start'\n            alignItems='center'\n            p={5}>{\n                state.recommendedRecipes.length > 0 ? state.recommendedRecipes.map(recipeObj => (\n                    <Grid item>\n                        <RecipeGlanceCard recipeDetail={recipeObj}/>\n                    </Grid>\n                )) : (\n                    <div>\n                        No Recipes Found.\n                    </div>\n                )\n            }\n            </Grid>)}\n        </div>\n    );\n};\n\nexport default RecipeGlanceFrame;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js",["193","194","195","196","197","198","199","200","201","202"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nexport default function RecipeGlanceCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\n            {props.recipeDetail.createdBy[0]}{props.recipeDetail.createdBy[1]}{props.recipeDetail.createdBy[2]}\n          </Avatar>\n        }\n        title={props.recipeDetail.title}\n        subheader={props.recipeDetail.creationDate}\n      />\n      <Link to={`/recipe/${props.recipeDetail.id}`}>\n      <CardMedia\n        className={classes.media}\n        image={props.recipeDetail.imageLocation}\n        title={props.recipeDetail.title}\n      />\n      </Link>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {props.recipeDetail.description}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js",["203"],"export default \"http://localhost:8080/cuttingboard/\";","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js",["204","205"],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":3,"column":10,"nodeType":"212","messageId":"213","endLine":3,"endColumn":20},{"ruleId":"210","severity":1,"message":"214","line":3,"column":22,"nodeType":"212","messageId":"213","endLine":3,"endColumn":33},{"ruleId":"210","severity":1,"message":"215","line":6,"column":8,"nodeType":"212","messageId":"213","endLine":6,"endColumn":14},{"ruleId":"210","severity":1,"message":"216","line":9,"column":21,"nodeType":"212","messageId":"213","endLine":9,"endColumn":33},{"ruleId":"217","severity":1,"message":"218","line":41,"column":14,"nodeType":"219","endLine":41,"endColumn":51},{"ruleId":"210","severity":1,"message":"220","line":34,"column":10,"nodeType":"212","messageId":"213","endLine":34,"endColumn":15},{"ruleId":"210","severity":1,"message":"221","line":37,"column":59,"nodeType":"212","messageId":"213","endLine":37,"endColumn":67},{"ruleId":"210","severity":1,"message":"222","line":8,"column":17,"nodeType":"212","messageId":"213","endLine":8,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":79,"column":6,"nodeType":"225","endLine":79,"endColumn":8,"suggestions":"226"},{"ruleId":"210","severity":1,"message":"227","line":1,"column":28,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"223","severity":1,"message":"228","line":91,"column":6,"nodeType":"225","endLine":91,"endColumn":8,"suggestions":"229"},{"ruleId":"210","severity":1,"message":"230","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":17},{"ruleId":"210","severity":1,"message":"220","line":12,"column":10,"nodeType":"212","messageId":"213","endLine":12,"endColumn":15},{"ruleId":"210","severity":1,"message":"231","line":43,"column":11,"nodeType":"212","messageId":"213","endLine":43,"endColumn":27},{"ruleId":"232","severity":1,"message":"233","line":51,"column":28,"nodeType":"234","messageId":"235","endLine":51,"endColumn":30},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","endLine":28,"endColumn":3},{"ruleId":"206","replacedBy":"239"},{"ruleId":"208","replacedBy":"240"},{"ruleId":"210","severity":1,"message":"220","line":8,"column":10,"nodeType":"212","messageId":"213","endLine":8,"endColumn":15},{"ruleId":"223","severity":1,"message":"241","line":69,"column":6,"nodeType":"225","endLine":69,"endColumn":8,"suggestions":"242"},{"ruleId":"223","severity":1,"message":"243","line":60,"column":6,"nodeType":"225","endLine":60,"endColumn":8,"suggestions":"244"},{"ruleId":"223","severity":1,"message":"245","line":59,"column":6,"nodeType":"225","endLine":59,"endColumn":8,"suggestions":"246"},{"ruleId":"210","severity":1,"message":"247","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"227","line":1,"column":28,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"248","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":12},{"ruleId":"210","severity":1,"message":"249","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":19},{"ruleId":"210","severity":1,"message":"250","line":9,"column":8,"nodeType":"212","messageId":"213","endLine":9,"endColumn":16},{"ruleId":"210","severity":1,"message":"251","line":11,"column":8,"nodeType":"212","messageId":"213","endLine":11,"endColumn":18},{"ruleId":"210","severity":1,"message":"252","line":14,"column":8,"nodeType":"212","messageId":"213","endLine":14,"endColumn":20},{"ruleId":"210","severity":1,"message":"253","line":15,"column":8,"nodeType":"212","messageId":"213","endLine":15,"endColumn":17},{"ruleId":"210","severity":1,"message":"254","line":16,"column":8,"nodeType":"212","messageId":"213","endLine":16,"endColumn":22},{"ruleId":"210","severity":1,"message":"255","line":17,"column":8,"nodeType":"212","messageId":"213","endLine":17,"endColumn":20},{"ruleId":"236","severity":1,"message":"256","line":1,"column":1,"nodeType":"238","endLine":1,"endColumn":54},{"ruleId":"210","severity":1,"message":"247","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"227","line":1,"column":28,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"no-unused-vars","'LOGIN_USER' is defined but never used.","Identifier","unusedVar","'LOGOUT_USER' is defined but never used.","'Logout' is defined but never used.","'authDispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'state' is assigned a value but never used.","'editForm' is assigned a value but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["259"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getIngredients'. Either include it or remove the dependency array.",["260"],"'Container' is defined but never used.","'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["257"],["258"],"React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'setShoppingList'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has a missing dependency: 'setRecommended'. Either include it or remove the dependency array.",["263"],"'useEffect' is defined but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","Assign literal to a variable before exporting as module default","no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [getCategories]",{"range":"274","text":"275"},"Update the dependencies array to be: [getIngredients]",{"range":"276","text":"277"},"Update the dependencies array to be: [setFavorites]",{"range":"278","text":"279"},"Update the dependencies array to be: [setShoppingList]",{"range":"280","text":"281"},"Update the dependencies array to be: [setRecommended]",{"range":"282","text":"283"},[2392,2394],"[getCategories]",[2898,2900],"[getIngredients]",[1938,1940],"[setFavorites]",[1750,1752],"[setShoppingList]",[3786,3788],"[setRecommended]"]
=======
[{"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\index.js":"1","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\App.js":"2","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Landing.js":"4","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Login.js":"5","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\NewRecipe.js":"6","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Favorites.js":"7","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Admin.js":"8","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Recipe.js":"9","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Search.js":"10","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\ShoppingList.js":"11","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\UserAccount.js":"12","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Footer.js":"13","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Nav.js":"14","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\AuthContext.js":"15","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\GlobalState.js":"16","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js":"17","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeGlanceFrame.js":"18","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\actions.js":"19","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\LoginForm.js":"20","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\FavoritesTable.js":"21","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeGlanceCard.js":"22","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\ListItemLink.js":"23","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\IngredientsList.js":"24","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Logout.js":"25","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\recipe.service.js":"26","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\auth.service.js":"27","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"28","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js":"29","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"30","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"31","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\shoppinglist.service.js":"32","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\category.service.js":"33","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\ingredient.service.js":"34","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\api-url.js":"35","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\auth-header.js":"36"},{"size":472,"mtime":1609693924750,"results":"37","hashOfConfig":"38"},{"size":2257,"mtime":1609703748119,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1609693924757,"results":"40","hashOfConfig":"38"},{"size":1605,"mtime":1609693956915,"results":"41","hashOfConfig":"38"},{"size":531,"mtime":1609703762977,"results":"42","hashOfConfig":"38"},{"size":899,"mtime":1609693956918,"results":"43","hashOfConfig":"38"},{"size":1008,"mtime":1609693956913,"results":"44","hashOfConfig":"38"},{"size":175,"mtime":1609703748133,"results":"45","hashOfConfig":"38"},{"size":7401,"mtime":1609703762980,"results":"46","hashOfConfig":"38"},{"size":4917,"mtime":1609704443959,"results":"47","hashOfConfig":"38"},{"size":1031,"mtime":1609693956921,"results":"48","hashOfConfig":"38"},{"size":193,"mtime":1609701574093,"results":"49","hashOfConfig":"38"},{"size":335,"mtime":1609693924743,"results":"50","hashOfConfig":"38"},{"size":1602,"mtime":1609693956903,"results":"51","hashOfConfig":"38"},{"size":1098,"mtime":1609693956934,"results":"52","hashOfConfig":"38"},{"size":2769,"mtime":1609693956936,"results":"53","hashOfConfig":"38"},{"size":11599,"mtime":1609693956911,"results":"54","hashOfConfig":"38"},{"size":7711,"mtime":1609703762975,"results":"55","hashOfConfig":"38"},{"size":784,"mtime":1609693956938,"results":"56","hashOfConfig":"38"},{"size":2572,"mtime":1609703762971,"results":"57","hashOfConfig":"38"},{"size":6829,"mtime":1609704238633,"results":"58","hashOfConfig":"38"},{"size":2026,"mtime":1609704012376,"results":"59","hashOfConfig":"38"},{"size":997,"mtime":1609693924744,"results":"60","hashOfConfig":"38"},{"size":5556,"mtime":1609703748124,"results":"61","hashOfConfig":"38"},{"size":515,"mtime":1609693956901,"results":"62","hashOfConfig":"38"},{"size":1727,"mtime":1609703762983,"results":"63","hashOfConfig":"38"},{"size":684,"mtime":1609693956924,"results":"64","hashOfConfig":"38"},{"size":6912,"mtime":1609693956907,"results":"65","hashOfConfig":"38"},{"size":1474,"mtime":1609693956905,"results":"66","hashOfConfig":"38"},{"size":9728,"mtime":1609693956904,"results":"67","hashOfConfig":"38"},{"size":10927,"mtime":1609693956906,"results":"68","hashOfConfig":"38"},{"size":991,"mtime":1609703748149,"results":"69","hashOfConfig":"38"},{"size":808,"mtime":1609693956925,"results":"70","hashOfConfig":"38"},{"size":1202,"mtime":1609693956926,"results":"71","hashOfConfig":"38"},{"size":65,"mtime":1609703801091,"results":"72","hashOfConfig":"38"},{"size":212,"mtime":1609693956923,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fb101u",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\index.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\App.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Landing.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Login.js",["151","152"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\NewRecipe.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Favorites.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Admin.js",[],["153","154"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Recipe.js",["155"],"import React, { useEffect, useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport RecipeService from \"../services/recipe.service\";\r\nimport { SET_CURRENT_RECIPE, SET_FAVORITES } from \"../utils/actions\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorderOutlined\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\n\r\n// const correctDummyRecipeObj = {\r\n//     id: 6,\r\n//     imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n//     title: \"Pita\",\r\n//     description: \"Round pita disks\",\r\n//     publicRecipe: true,\r\n//     ingredients: [\r\n//         {\r\n//             id: 16,\r\n//             amount: {\r\n//                 id: 17,\r\n//                 amount: \"1 clove crushed\",\r\n//                 ingredient: {\r\n//                     id: 1,\r\n//                     ingredient: \"Garlic\"\r\n//                 }\r\n//             }\r\n//         },\r\n//         {\r\n//             id: 15,\r\n//             amount: {\r\n//                 id: 16,\r\n//                 amount: \"2 tbsp\",\r\n//                 ingredient: {\r\n//                     id: 2,\r\n//                     ingredient: \"Salt\"\r\n//                 }\r\n//             }\r\n//         },\r\n//         {\r\n//             id: 14,\r\n//             amount: {\r\n//                 id: 15,\r\n//                 amount: \"4 cups\",\r\n//                 ingredient: {\r\n//                     id: 3,\r\n//                     ingredient: \"Flour\"\r\n//                 }\r\n//             }\r\n//         }\r\n//     ],\r\n//     instructions: [\r\n//         {\r\n//             id: 8,\r\n//             step: {\r\n//                 id: 6,\r\n//                 step: \"knead until smooth\"\r\n//             },\r\n//             stepOrder: 1\r\n//         },\r\n//         {\r\n//             id: 9,\r\n//             step: {\r\n//                 id: 7,\r\n//                 step: \"let rest for 45-90 min\"\r\n//             },\r\n//             stepOrder: 2\r\n//         },\r\n//         {\r\n//             id: 10,\r\n//             step: {\r\n//                 id: 8,\r\n//                 step: \"punch down dough\"\r\n//             },\r\n//             stepOrder: 3\r\n//         },\r\n//         {\r\n//             id: 11,\r\n//             step: {\r\n//                 id: 9,\r\n//                 step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n//             },\r\n//             stepOrder: 4\r\n//         },\r\n//         {\r\n//             id: 12,\r\n//             step: {\r\n//                 id: 10,\r\n//                 step: \"bake at 375 for 27-30 min\"\r\n//             },\r\n//             stepOrder: 5\r\n//         }\r\n//     ],\r\n//     category: {\r\n//         id: 1,\r\n//         category: \"Bread\"\r\n//     }\r\n// }\r\n\r\n//Displays a chosen Recipe with id matching www.url.com/recipe/{id}\r\nconst Recipe = (props) => {\r\n  //Contains all Relevant Data for Recipe Display\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  //Contains Bool for whether Recipe is one of your favorites or not\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n  //Loads the list of user's favorites\r\n  const setFavorites = () => {\r\n    RecipeService.getFavoriteRecipes()\r\n      .then(res => {\r\n        console.log(res.data);\r\n        res.status === 200 && dispatch({\r\n          type: SET_FAVORITES,\r\n          favorites: res.data,\r\n        })\r\n        console.log(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //Loads the RecipeData for Display\r\n  const handleLoadRecipe = (recipeId) => {\r\n    RecipeService.getRecipeById(recipeId)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        res.status === 200 && dispatch({\r\n          type: SET_CURRENT_RECIPE,\r\n          recipe: res.data\r\n        });\r\n        //console.log(RecipeService.getCurrentRecipe());\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //Adds Favorite to your Favorites\r\n  const handleAddFavorite = (recipeId) => {\r\n    RecipeService.postFavoriteRecipe(recipeId)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        //Sets local state flag to true for Button Display\r\n        res.status === 201 && setIsFavorite(true);\r\n        console.log(isFavorite);\r\n      })\r\n      .catch(err => {\r\n        console.log(\"Recipe is already a favorite or server cannot be reached.\");\r\n      });\r\n  };\r\n\r\n  //Removes Favorite from your Favorites\r\n  const handleRemoveFavorite = (recipeId) => {\r\n    RecipeService.deleteFavoriteRecipe(recipeId)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        //Sets local state flag to true for Button Display\r\n        res.status === 204 && setIsFavorite(false);\r\n        console.log(isFavorite);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n\r\n  //  useEffect to API get by ID etc...\r\n  useEffect(() => {\r\n    //Get {id} from URL\r\n    const recipeId = props.match.params.id;\r\n\r\n    //Load the Recipe from Back-end\r\n    handleLoadRecipe(recipeId);\r\n\r\n    //Set the State's list of Favorites so we can check if this recipe is a favorite already\r\n    setFavorites();\r\n\r\n    //Check to see if current recipe is in our favorites\r\n\r\n  }, [] /*Empty Array Ensures Side Effects only occur once*/\r\n  );\r\n\r\n  //When finished, pull apart created JSON obj and display each component\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        {console.log(state.currentRecipe)}\r\n        {state.currentRecipe ?\r\n          <React.Fragment>\r\n            <h1>{state.currentRecipe.title}</h1>\r\n            <h3>Recipe #{state.currentRecipe.id}</h3>\r\n            <strong>Category:</strong> {state.currentRecipe.category.category}\r\n            <br /><img style={{ width: 30 + '%' }} src={\"http://images.generictech.org/\" + state.currentRecipe.imageLocation} />\r\n            <br />\r\n            {isFavorite ? (\r\n              <Button onClick={() =>    { handleRemoveFavorite(props.match.params.id); console.log(\"isFavorite: \" + isFavorite); }} startIcon={<StarIcon />}> Unfavorite</Button>\r\n            ) : (\r\n                <Button onClick={() =>  { handleAddFavorite(props.match.params.id); console.log(\"isFavorite: \" + isFavorite); }} startIcon={<StarBorderIcon />}> Favorite</Button>\r\n              )}\r\n            <h1>Description:</h1>\r\n            {state.currentRecipe.description}\r\n            <div id=\"ingredients-list\">\r\n              <h1>Ingredients</h1>\r\n              <ul>\r\n                {state.currentRecipe.ingredients.map(ingredient => (\r\n                  <li key={ingredient.amount.ingredient.ingredient}>\r\n                    {ingredient.amount.amount} {ingredient.amount.ingredient.ingredient}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div id=\"instructions-list\">\r\n              <h1>Instructions</h1>\r\n              <ol>\r\n                {state.currentRecipe.instructions.map(instruction => (\r\n                  <li key={instruction.stepOrder}>\r\n                    {instruction.step.step}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n              <br /><br />\r\n            </div>\r\n          </React.Fragment>\r\n          : <div>\r\n            No Recipes Found.\r\n          </div>\r\n        }\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\Search.js",["156","157","158"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\ShoppingList.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\pages\\UserAccount.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Footer.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Nav.js",["159"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\AuthContext.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\GlobalState.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js",["160","161"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeGlanceFrame.js",["162"],"import RecipeGlanceCard from \"../components/RecipeGlanceCard\";\r\nimport React, {useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { SET_RECOMMENDED_RECIPES, LOADING } from \"../utils/actions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RecipeService from \"../services/recipe.service\";\r\n\r\nconst dummyRecipeArray = [{\r\n  id: 6,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n},\r\n{\r\n  id: 7,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n},\r\n{\r\n  id: 9,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n}];\r\n\r\nconst RecipeGlanceFrame = () => {\r\n\r\n    \r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const setRecommended = () => {\r\n    RecipeService.getAllRecommendedRecipes()\r\n      .then(res => {\r\n        console.log(res.data);\r\n        res.status === 200 && dispatch({\r\n          type: SET_RECOMMENDED_RECIPES,\r\n          recipes: res.data\r\n        });\r\n        //console.log(RecipeService.getCurrentRecipe());\r\n      })\r\n      .catch(err => {\r\n          console.log(err);\r\n        });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    setRecommended();\r\n  }, []);\r\n\r\n    return (\r\n        <div>\r\n            {state.loading ? (\r\n                <Grid container item direction='row' justify='center'>\r\n                <Grid item>\r\n                    <CircularProgress color='secondary' />\r\n                </Grid>\r\n                </Grid>\r\n            ) : (\r\n            <Grid\r\n            container\r\n            direction='row'\r\n            justify='flex-start'\r\n            alignItems='center'\r\n            p={5}>{\r\n                state.recommendedRecipes.length > 0 ? state.recommendedRecipes.map(recipeObj => (\r\n                    <Grid item key={recipeObj.id}>\r\n                        <RecipeGlanceCard recipeDetail={recipeObj}/>\r\n                    </Grid>\r\n                )) : (\r\n                    <div>\r\n                        No Recipes Found.\r\n                    </div>\r\n                )\r\n            }\r\n            </Grid>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeGlanceFrame;","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\utils\\actions.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\LoginForm.js",["163","164","165","166"],"import React, {useState} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {SET_USER} from \"../utils/actions\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst LoginForm = () => {\r\n\r\n  //State Storage\r\n  const [state, dispatch] = useStoreContext();\r\n  //Temporary storage for the user form\r\n  const [userForm, setUserForm] = useState({username: \"\", password: \"\"});\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n\r\n    //Updated Login Function\r\n    const handleLogin = (username, password) => {\r\n        AuthService.login(username, password)\r\n          .then(res => {\r\n            console.log(res);\r\n            res.status === 200 && AuthService.setCurrentUser({...res.data, accessToken: res.headers.token }) \r\n            res.status === 200 && dispatch({\r\n              type: SET_USER,\r\n              user: res.data\r\n            });\r\n            console.log(AuthService.getCurrentUser())\r\n          })\r\n          .catch(err => {\r\n              console.log(err);\r\n              //Displays Error Message\r\n              setErrorMessage(\"Incorrect Username or Password\");\r\n            });\r\n      };\r\n\r\n  //Invokes Login Helper Function\r\n  const handleSubmit = (event) => {\r\n    //Disables Page Reload onSubmit\r\n    event.preventDefault();\r\n    handleLogin(userForm.username, userForm.password);\r\n    history.replace(\"/\");\r\n\r\n    const handleFormUpdate = (event, value) => {\r\n        setUserForm({...userForm, value: event.target.value})\r\n    }\r\n}\r\n  return (\r\n    <div id=\"login-form\">\r\n        <form>\r\n            <h1>Login</h1>\r\n            {(errorMessage != \"\") ? (<div className=\"error-message\">{errorMessage}</div>) : \"\"}\r\n            <div className=\"form-group\">\r\n                <TextField name=\"username\" id=\"username\" value={userForm.username} onChange={e => setUserForm({...userForm, username: e.target.value})}label=\"Username\"/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <TextField type=\"password\" name=\"password\" id=\"password\" value={userForm.password} onChange={e => setUserForm({...userForm, password: e.target.value})} label=\"Password\"/>\r\n            </div>\r\n            <Button\r\n                onClick={handleSubmit}>\r\n                Login\r\n            </Button>\r\n        </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\FavoritesTable.js",["167"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeGlanceCard.js",["168","169"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\ListItemLink.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\IngredientsList.js",["170"],"import React, { useEffect } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteButton from \"@material-ui/icons/Delete\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { SET_SHOPPING_LIST, LOADING } from \"../utils/actions\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport default function CheckboxList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const dummyShoppingListData = [\r\n    {\r\n      id: 0,\r\n      ingredientName: \"Garlic\",\r\n      checked: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      ingredientName: \"Parmesan\",\r\n      checked: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      ingredientName: \"Salt\",\r\n      checked: false,\r\n    },\r\n  ];\r\n\r\n  const setShoppingList = () => {\r\n    dispatch({ type: LOADING, loading: true });\r\n    setTimeout(function () {\r\n      dispatch({\r\n        type: SET_SHOPPING_LIST,\r\n        shoppingList: dummyShoppingListData,\r\n      });\r\n    }, 1500);\r\n  };\r\n\r\n  // WILL BE AN API CALL\r\n  const removeFromList = id => {\r\n    const shorterList = state.shoppingList.filter(item => item.id !== id);\r\n    dispatch({\r\n      type: SET_SHOPPING_LIST,\r\n      shoppingList: shorterList,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShoppingList();\r\n  }, []);\r\n\r\n  const handleToggle = value => () => {\r\n    value.checked = !value.checked;\r\n    const updateShoppingList = state.shoppingList.map(item =>\r\n      item.id === value.id ? value : item\r\n    );\r\n\r\n    dispatch({\r\n      type: SET_SHOPPING_LIST,\r\n      shoppingList: updateShoppingList,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {state.loading ? (\r\n        <Grid container item direction='row' justify='center'>\r\n          <Grid item>\r\n            <CircularProgress color='secondary' />\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid container item direction='row' justify='center'>\r\n          {state.shoppingList.length > 0 ? (\r\n            <Grid item xs={12}>\r\n              <Fade in={!state.loading}>\r\n                <List>\r\n                  {state.shoppingList.map((value, index) => (\r\n                    <ListItem\r\n                      key={value.id}\r\n                      role={undefined}\r\n                      dense\r\n                      button\r\n                      onClick={handleToggle(value)}>\r\n                      <ListItemIcon>\r\n                        <Checkbox\r\n                          edge='start'\r\n                          checked={value.checked}\r\n                          tabIndex={-1}\r\n                          disableRipple\r\n                          inputProps={{\r\n                            \"aria-labelledby\": `checkbox-list-label-${value.id}`,\r\n                          }}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        id={`checkbox-list-label-${value.id}`}\r\n                        primary={`${value.ingredientName}`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Tooltip title='Delete from list'>\r\n                          <IconButton\r\n                            edge='end'\r\n                            aria-label='comments'\r\n                            onClick={() => removeFromList(value.id)}>\r\n                            <DeleteButton />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Fade>\r\n            </Grid>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Grid item>\r\n                <Typography variant='subtitle1'>\r\n                  No items found in your shopping list\r\n                </Typography>\r\n                {/* TO BE DELETED */}\r\n                <button onClick={() => setShoppingList()}>\r\n                  POPULATE DUMMY DATA\r\n                </button>\r\n              </Grid>\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\Logout.js",["171"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\recipe.service.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\auth.service.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js",["172","173","174","175"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",["176","177"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",["178"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\shoppinglist.service.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\category.service.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\ingredient.service.js",[],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\api-url.js",["179"],"C:\\Users\\danie\\DEV\\Revature\\projects\\CuttingBoard-frontend\\src\\services\\auth-header.js",[],{"ruleId":"180","severity":1,"message":"181","line":4,"column":8,"nodeType":"182","messageId":"183","endLine":4,"endColumn":17},{"ruleId":"180","severity":1,"message":"184","line":7,"column":21,"nodeType":"182","messageId":"183","endLine":7,"endColumn":33},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":41,"column":14,"nodeType":"191","endLine":41,"endColumn":51},{"ruleId":"180","severity":1,"message":"192","line":4,"column":29,"nodeType":"182","messageId":"183","endLine":4,"endColumn":39},{"ruleId":"180","severity":1,"message":"193","line":14,"column":17,"nodeType":"182","messageId":"183","endLine":14,"endColumn":25},{"ruleId":"194","severity":1,"message":"195","line":79,"column":6,"nodeType":"196","endLine":79,"endColumn":8,"suggestions":"197"},{"ruleId":"180","severity":1,"message":"193","line":8,"column":17,"nodeType":"182","messageId":"183","endLine":8,"endColumn":25},{"ruleId":"180","severity":1,"message":"198","line":51,"column":10,"nodeType":"182","messageId":"183","endLine":51,"endColumn":15},{"ruleId":"180","severity":1,"message":"199","line":54,"column":59,"nodeType":"182","messageId":"183","endLine":54,"endColumn":67},{"ruleId":"194","severity":1,"message":"200","line":59,"column":6,"nodeType":"196","endLine":59,"endColumn":8,"suggestions":"201"},{"ruleId":"180","severity":1,"message":"181","line":4,"column":8,"nodeType":"182","messageId":"183","endLine":4,"endColumn":17},{"ruleId":"180","severity":1,"message":"198","line":12,"column":10,"nodeType":"182","messageId":"183","endLine":12,"endColumn":15},{"ruleId":"180","severity":1,"message":"202","line":43,"column":11,"nodeType":"182","messageId":"183","endLine":43,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":51,"column":28,"nodeType":"205","messageId":"206","endLine":51,"endColumn":30},{"ruleId":"194","severity":1,"message":"207","line":114,"column":6,"nodeType":"196","endLine":114,"endColumn":8,"suggestions":"208"},{"ruleId":"180","severity":1,"message":"209","line":1,"column":17,"nodeType":"182","messageId":"183","endLine":1,"endColumn":26},{"ruleId":"180","severity":1,"message":"210","line":1,"column":28,"nodeType":"182","messageId":"183","endLine":1,"endColumn":36},{"ruleId":"194","severity":1,"message":"211","line":84,"column":6,"nodeType":"196","endLine":84,"endColumn":8,"suggestions":"212"},{"ruleId":"180","severity":1,"message":"198","line":8,"column":10,"nodeType":"182","messageId":"183","endLine":8,"endColumn":15},{"ruleId":"180","severity":1,"message":"192","line":4,"column":8,"nodeType":"182","messageId":"183","endLine":4,"endColumn":18},{"ruleId":"180","severity":1,"message":"213","line":6,"column":8,"nodeType":"182","messageId":"183","endLine":6,"endColumn":12},{"ruleId":"180","severity":1,"message":"214","line":11,"column":9,"nodeType":"182","messageId":"183","endLine":11,"endColumn":14},{"ruleId":"180","severity":1,"message":"193","line":12,"column":17,"nodeType":"182","messageId":"183","endLine":12,"endColumn":25},{"ruleId":"180","severity":1,"message":"215","line":41,"column":5,"nodeType":"182","messageId":"183","endLine":41,"endColumn":15},{"ruleId":"194","severity":1,"message":"195","line":75,"column":6,"nodeType":"196","endLine":75,"endColumn":8,"suggestions":"216"},{"ruleId":"194","severity":1,"message":"217","line":89,"column":6,"nodeType":"196","endLine":89,"endColumn":8,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":1,"column":1,"nodeType":"221","endLine":1,"endColumn":64},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'authDispatch' is assigned a value but never used.","no-native-reassign",["222"],"no-negated-in-lhs",["223"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Typography' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["224"],"'state' is assigned a value but never used.","'editForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRecommended'. Either include it or remove the dependency array.",["225"],"'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.",["226"],"'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getShoppingList'. Either include it or remove the dependency array.",["227"],"'Grid' is defined but never used.","'debug' is assigned a value but never used.","'categoryId' is assigned a value but never used.",["228"],"React Hook useEffect has a missing dependency: 'getIngredients'. Either include it or remove the dependency array.",["229"],"import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"230","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [getCategories]",{"range":"241","text":"242"},"Update the dependencies array to be: [setRecommended]",{"range":"243","text":"244"},"Update the dependencies array to be: [setFavorites]",{"range":"245","text":"246"},"Update the dependencies array to be: [getShoppingList]",{"range":"247","text":"248"},{"range":"249","text":"242"},"Update the dependencies array to be: [getIngredients]",{"range":"250","text":"251"},[2451,2453],"[getCategories]",[3844,3846],"[setRecommended]",[3389,3391],"[setFavorites]",[2625,2627],"[getShoppingList]",[2346,2348],[2864,2866],"[getIngredients]"]
>>>>>>> dev
