[{"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js":"1","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js":"2","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js":"3","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js":"4","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js":"5","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js":"6","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js":"7","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js":"8","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js":"9","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js":"10","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js":"11","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js":"12","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js":"13","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js":"14","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js":"15","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js":"16","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"17","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"18","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"19","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js":"20","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js":"21","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js":"22","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js":"23","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js":"24","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js":"25","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js":"26","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js":"27"},{"size":457,"mtime":1608587344002,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":2190,"mtime":1609396793223,"results":"31","hashOfConfig":"29"},{"size":764,"mtime":1609283878801,"results":"32","hashOfConfig":"29"},{"size":164,"mtime":1609192482162,"results":"33","hashOfConfig":"29"},{"size":971,"mtime":1609371884221,"results":"34","hashOfConfig":"29"},{"size":167,"mtime":1609192482178,"results":"35","hashOfConfig":"29"},{"size":182,"mtime":1609192482180,"results":"36","hashOfConfig":"29"},{"size":322,"mtime":1608587343997,"results":"37","hashOfConfig":"29"},{"size":749,"mtime":1609396793233,"results":"38","hashOfConfig":"29"},{"size":533,"mtime":1609396793236,"results":"39","hashOfConfig":"29"},{"size":2616,"mtime":1609396793240,"results":"40","hashOfConfig":"29"},{"size":1048,"mtime":1609364795628,"results":"41","hashOfConfig":"29"},{"size":2914,"mtime":1609281326114,"results":"42","hashOfConfig":"29"},{"size":8628,"mtime":1609182441204,"results":"43","hashOfConfig":"29"},{"size":1664,"mtime":1609192482160,"results":"44","hashOfConfig":"29"},{"size":6333,"mtime":1609283878799,"results":"45","hashOfConfig":"29"},{"size":6861,"mtime":1609283878793,"results":"46","hashOfConfig":"29"},{"size":9337,"mtime":1609364795596,"results":"47","hashOfConfig":"29"},{"size":764,"mtime":1609364795633,"results":"48","hashOfConfig":"29"},{"size":2112,"mtime":1609364795587,"results":"49","hashOfConfig":"29"},{"size":640,"mtime":1609364795625,"results":"50","hashOfConfig":"29"},{"size":344,"mtime":1609364795592,"results":"51","hashOfConfig":"29"},{"size":963,"mtime":1608587343999,"results":"52","hashOfConfig":"29"},{"size":4760,"mtime":1609396793227,"results":"53","hashOfConfig":"29"},{"size":996,"mtime":1609396793238,"results":"54","hashOfConfig":"29"},{"size":4483,"mtime":1609396793229,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1u01klj",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js",[],["120","121"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js",["122","123","124","125"],"import React from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport LoginForm from \"../components/LoginForm\";\nimport Container from \"@material-ui/core/Container\";\n\nconst Landing = () => {\n  const [authState, authDispatch] = useAuthContext();\n\n  return (\n    <div className='page-body-content'>\n      <Container>\n        {authState.username ? (\n          <div>Welcome back, {authState.username}</div>\n        ) : (\n          <LoginForm />\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Landing;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js",["126"],"import React, { useEffect, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst dummyRecipeObj = {\n  id: 12,\n  imageLocation: \"https://i2.wp.com/eugeniekitchen.com/wp-content/uploads/2012/12/souffle.jpg?zoom=2.625&w=205\",\n  title: \"The Perfect Souffle\",\n  description: \"Souffle is just a matter of time. The time gap from the oven to the table. There is a famous French saying: Le soufflé n’attend pas, on attend le soufflé. Meaning le soufflé doesn’t wait, we (the guests) wait. But today I will not wait for le soufflé, I will make the soufflé.\",\n  createdBy: \"Nom.com Selects\",\n  creationDate: \"12/25/2020\",\n  category: \"French Cuisine\",\n  instructions: [\"Give Up\", \"Order Fast Food\", \"????\", \"Profit\"],\n  ingredients: [{\"ingredient\": \"Butter\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Flour\", \"amount\": \"2 tbsp(30mL)\"}, {\"ingredient\": \"Salt\", \"amount\": \"1/2 tsp(2.5mL)\"}, {\"ingredient\": \"Milk\", \"amount\": \"3/4 cup (175mL)\"}, {\"ingredient\": \"Egg Yolk(s)\", \"amount\": \"4\"}, {\"ingredient\": \"Egg White(s)\", \"amount\": \"2\", }, {\"ingredient\": \"Cream of Tartar\", \"amount\": \"1/4 tsp(1.25mL)\"}]\n};\n\n//Displays a chosen Recipe with id matching www.url.com/recipe/{id}\nconst Recipe = (props) => {\n  //Contains all Relevant Data for Recipe Display\n  const [recipeData, setRecipeData] = useState({id: null, imageLocation: \"\", title: \"\", description: \"\", createdBy: \"\", creationDate: \"\", category: \"\", instructions: [], ingredients: []});\n  \n  //  useEffect to API get by ID etc...\n  useEffect(() => {\n    //API Call using matching parameter\n    //setRecipeData(doGetRecipe(props.match.params.id));\n\n    //TEMPORARY: Set Dummy Data\n    setRecipeData(dummyRecipeObj);\n\n  }, [props] /*Empty Array Ensures Side Effects only occur once, might needs props for dependency*/\n  );\n\n  //When finished, pull apart created JSON obj and display each component\n  return (\n    <div className='page-body-content' onLoad={useEffect}>\n      <Paper>\n        <h1>{recipeData.title}</h1>\n        <h3>Recipe #{recipeData.id}</h3>\n        <strong>Created by:</strong> {recipeData.createdBy}\n        <br/>{recipeData.creationDate}\n        <br/><strong>Category:</strong> {recipeData.category}\n        <br/><img src={recipeData.imageLocation}/>\n        <h1>Description:</h1>\n        {recipeData.description}\n        <div id=\"ingredients-list\">\n        <h1>Ingredients</h1>\n          <ul>\n          {recipeData.ingredients.map(ingredient => (\n            <li key={ingredient.ingredient}>\n              {ingredient.amount} {ingredient.ingredient}\n            </li>\n          ))}\n          </ul>\n        </div>\n        <div id=\"instructions-list\">\n        <h1>Instructions</h1>\n          <ol>\n            {recipeData.instructions.map(instruction => (\n            <li>\n              {(instruction)}\n            </li>\n          ))}\n          </ol>\n        </div>\n      </Paper>\n    </div>\n  );\n};\n\nexport default Recipe;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js",["127"],"import React from \"react\";\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Icon from \"@material-ui/core/Icon\";\nimport API from \"../utils/API\";\n\nconst signUpSubmit = (\n  values,\n  { setSubmitting, resetForm, setFieldError, setStatus }\n) => {\n  setTimeout(() => {\n    if (checkUniqueUsername(values.username, setFieldError, setStatus)) {\n      // USERNAME IS UNIQUE, FINALIZE CALL TO API\n      alert(JSON.stringify(values, null, 2));\n      resetForm();\n    } else {\n      // USERNAME EXISTS STOP SUBMISSION DON\"T CALL API\n    }\n    setSubmitting(false);\n  }, 1000);\n};\n\nconst checkUniqueUsername = (username, setFieldError, setStatus) => {\n  // call API to check username return true or false\n  // helper func\n  if (username.length < 8) {\n    setFieldError(\"username\", \"Username must contain at least 8 characters\");\n    return false;\n  }\n\n  if (username === \"dansirdan\") {\n    setFieldError(\"username\", \"This username already exists.\");\n  } else {\n    setStatus({ username: \"Looks good!\" });\n    return true;\n  }\n  return false;\n};\n\nconst SignUpForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    status,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFieldError,\n    setStatus,\n  } = props;\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <form\n          id='signup-form'\n          style={{\n            maxWidth: 600,\n            margin: \"auto\",\n            marginTop: 30,\n            padding: 20,\n\n          }}\n          noValidate\n          autoComplete='off'\n          onSubmit={handleSubmit}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Grid item>\n              <Typography variant='h2'>Create an Account</Typography>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.username && Boolean(errors.username)}\n                id='username'\n                label='Username'\n                value={values.username}\n                placeholder='foodie77'\n                helperText={\n                  touched.username && errors.username\n                    ? errors.username\n                    : status.username\n                    ? status.username\n                    : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n              <Grid container item justify='flex-end' alignItems='flex-end'>\n                <Button\n                  onClick={() =>\n                    checkUniqueUsername(\n                      values.username,\n                      setFieldError,\n                      setStatus\n                    )\n                  }\n                  variant='outlined'\n                  color='default'\n                  endIcon={<Icon>check</Icon>}>\n                  Check\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.email && Boolean(errors.email)}\n                id='email'\n                label='Email'\n                value={values.email}\n                placeholder='diners.driveins@foodnetwork.net'\n                helperText={touched.email && errors.email ? errors.email : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.firstName && Boolean(errors.firstName)}\n                id='firstName'\n                label='First Name'\n                value={values.firstName}\n                placeholder='Guy'\n                helperText={touched.firstName && errors.firstName ? errors.firstName : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.lastName && Boolean(errors.lastName)}\n                id='lastName'\n                label='Last Name'\n                value={values.lastName}\n                placeholder='Fieri'\n                helperText={touched.lastName && errors.lastName ? errors.lastName : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.password && Boolean(errors.password)}\n                id='password'\n                label='Password'\n                value={values.password}\n                type='password'\n                placeholder=''\n                helperText={touched.password && errors.password ? errors.password : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={\n                  touched.confirmPassword && Boolean(errors.confirmPassword)\n                }\n                id='confirmPassword'\n                label='Confirm Password'\n                value={values.confirmPassword}\n                type='password'\n                placeholder=''\n                helperText={\n                  touched.confirmPassword && errors.confirmPassword ? errors.confirmPassword : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n\n            <Grid container item justify='flex-end' alignItems='flex-end'>\n              <Button\n                type='submit'\n                variant='outlined'\n                color='default'\n                disabled={isSubmitting}\n                endIcon={<Icon>send</Icon>}>\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nconst UserAccountForm = withFormik({\n  mapPropsToValues: ({\n    username,\n    email,\n    firstName,\n    lastName,\n    password,\n    confirmPassword,\n  }) => {\n    return {\n      username: username || \"\",\n      email: email || \"\",\n      firstName: firstName || \"\",\n      lastName: lastName || \"\",\n      password: password || \"\",\n      confirmPassword: confirmPassword || \"\",\n    };\n  },\n  mapPropsToStatus: ({ username }) => {\n    return {\n      username: username || \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    username: Yup.string()\n      .min(8, \"Username must contain at least 8 characters\")\n      .required(\"Enter a username\"),\n    email: Yup.string()\n      .email(\"Enter a valid email\")\n      .required(\"Email is required\"),\n    firstName: Yup.string().required(\"Required\"),\n    lastName: Yup.string().required(\"Required\"),\n    password: Yup.string()\n      .min(8, \"Password must contain at least 8 characters\")\n      .required(\"Enter your password\"),\n    confirmPassword: Yup.string()\n      .required(\"Confirm your password\")\n      .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\n  }),\n  handleSubmit: signUpSubmit,\n})(SignUpForm);\n\nexport default UserAccountForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js",["128"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemLink from \"../components/ListItemLink\";\n// import AuthMenu from \"../components/AuthMenu\";\n// import { authContext } from \"../contexts/AuthContext\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport Logout from \"../components/Logout\";\n\nconst Nav = () => {\n  const [authState, authDispatch] = useAuthContext();\n  return (\n    <Grid\n      container\n      direction='row'\n      justify='flex-start'\n      alignItems='center'\n      p={5}>\n      <Grid item>\n        <ListItemLink to='/' primary='Home' />\n      </Grid>\n      <Grid item>\n        <ListItemLink to='/recipe/12' primary='Recipe' />\n      </Grid>\n      <Grid item>\n        <ListItemLink to='/search' primary='Search' />\n      </Grid>\n      {authState.username ? (\n        <React.Fragment>\n          {authState.admin ? (\n            <Grid item>\n            <ListItemLink to='/admin' primary='Admin' />\n          </Grid>\n          ) : (\n            <React.Fragment></React.Fragment>\n          )}\n          <Grid item>\n            <ListItemLink to='/favorites' primary='Favorites' />\n          </Grid>\n          <Grid item>\n            <ListItemLink to='/user-account' primary='User Account' />\n          </Grid>\n          <Grid item>\n            <Logout />\n          </Grid>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n\n        <Grid item>\n          <ListItemLink to='/login' primary='Login' />\n        </Grid>\n              <Grid item>\n              <ListItemLink to='/signup' primary='Signup' />\n            </Grid>\n        </React.Fragment>\n      )}\n    </Grid>\n  );\n};\n\nexport default Nav;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js",["129","130"],"import React, {useState} from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport { LOGIN_USER } from \"../utils/actions\";\nimport doLogin from \"../utils/API\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\n\nconst LoginForm = () => {\n\n  //State Storage\n  const [authState, authDispatch] = useAuthContext();\n  //Temporary storage for the user form\n  const [userForm, setUserForm] = useState({username: \"\", password: \"\"});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    /*authDispatch({ type: LOGIN_USER, username: authState.username, admin: false })*/\n    doLogin.doLogin(userForm)\n    .then (() => {\n        authState.username = userForm.username;\n        authDispatch({ type: LOGIN_USER, username: authState.username, admin: false});\n        console.log(\"Login Successful\");\n    })\n    .catch (() => {\n        setErrorMessage(\"Incorrect Username or Password\");\n        console.log(\"Incorrect Username or Password\");\n    })\n\n    const handleFormUpdate = (event, value) => {\n        setUserForm({...userForm, value: event.target.value})\n    }\n}\n  return (\n    <Container>\n        <form>\n            <div id=\"login-form\">\n            <h1>Login</h1>\n                {(errorMessage != \"\") ? (<div className=\"error-message\">{errorMessage}</div>) : \"\"}\n                <div className=\"form-group\">\n                    <TextField name=\"username\" id=\"username\" value={userForm.username} onChange={e => setUserForm({...userForm, username: e.target.value})}label=\"Username\"/>\n                </div>\n                <div className=\"form-group\">\n                    <TextField type=\"password\" name=\"password\" id=\"password\" value={userForm.password} onChange={e => setUserForm({...userForm, password: e.target.value})} label=\"Password\"/>\n                </div>\n                <Button\n                    onClick={handleSubmit}>\n                    Login\n                </Button>\n            </div>\n        </form>\n      </Container>\n  );\n};\n\nexport default LoginForm;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js",["131"],"import axios from \"axios\";\n\nexport default {\n  /* baseURL: \"http://\",\n  \n    TODO create API Object methods\n    \n    doLogin: function(loginObj) {\n        return axios.post(this.baseURL + \"/login\", loginObj )\n    }\n    */\n\n   doLogin: async function (userData) {\n     return await new Promise((resolve, reject) => {\n       //Simulate server request speed with 200ms ping\n      setTimeout(() => {\n        //Dummy Data for Testing until Back-end is finished\n        if (userData.username === \"a\" && userData.password === \"a\")\n        {\n          resolve();\n        }\n        else\n        {\n          reject();\n        }\n      }, 200)\n     })\n  }\n};\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js",["132"],"import React from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport { LOGOUT_USER } from \"../utils/actions\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Logout = () => {\n    const [authState, authDispatch] = useAuthContext();\n    \n    return (\n        <Button onClick={() => authDispatch({ type: LOGOUT_USER })}>Logout</Button>\n    )\n}\n\nexport default Logout;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js",["133"],"import React, { useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TrashIcon from \"@material-ui/icons/Delete\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { Link } from \"react-router-dom\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { SET_FAVORITES, LOADING } from \"../utils/actions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst FavoritesTable = () => {\n  const [state, dispatch] = useStoreContext();\n\n  const favoriteRecipes = [\n    {\n      id: 0,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"soup\",\n      public: true,\n    },\n    {\n      id: 2,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"pasta\",\n      public: false,\n    },\n    {\n      id: 3,\n      img: \"https://via.placeholder.com/100\",\n      title: \"test\",\n      category: \"dessert\",\n      public: true,\n    },\n  ];\n\n  //\n  const setFavorites = () => {\n    dispatch({ type: LOADING, loading: true });\n    setTimeout(function () {\n      dispatch({\n        type: SET_FAVORITES,\n        favorites: favoriteRecipes,\n      });\n    }, 1500);\n  };\n\n  // WILL BE AN API CALL\n  const removeFavorite = id => {\n    const shorterFavs = state.favorites.filter(fav => fav.id !== id);\n    dispatch({\n      type: SET_FAVORITES,\n      favorites: shorterFavs,\n    });\n  };\n\n  useEffect(() => {\n    setFavorites();\n  }, []);\n\n  return (\n    <React.Fragment>\n      {state.loading ? (\n        <Grid container item direction='row' justify='center'>\n          <Grid item>\n            <CircularProgress color='secondary' />\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid container item direction='row' justify='center'>\n          {state.favorites.length > 0 ? (\n            <Grid item xs={12}>\n              <Fade in={!state.loading}>\n                <TableContainer component={Paper}>\n                  <Table aria-label='simple table'>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Image</TableCell>\n                        <TableCell>Title</TableCell>\n                        <TableCell>Category</TableCell>\n                        <TableCell>Public/Private</TableCell>\n                        <TableCell>Actions</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {state.favorites.map(recipe => (\n                        <TableRow key={recipe.id}>\n                          <TableCell component='th' scope='row'>\n                            <Tooltip title='View Recipe'>\n                              <Link to={`/recipe/${recipe.id}`}>\n                                <img src={recipe.img} alt='placeholder' />\n                              </Link>\n                            </Tooltip>\n                          </TableCell>\n                          <TableCell>{recipe.title}</TableCell>\n                          <TableCell>{recipe.category}</TableCell>\n                          <TableCell>\n                            {recipe.public ? \"public\" : \"private\"}\n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title='Remove from Favorites'>\n                              <IconButton\n                                onClick={() => removeFavorite(recipe.id)}>\n                                <TrashIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Fade>\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item>\n                <Typography variant='subtitle1'>\n                  no favorite recipes found\n                </Typography>\n                <button onClick={() => setFavorites()}>\n                  POPULATE DUMMY DATA\n                </button>\n              </Grid>\n            </React.Fragment>\n          )}\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default FavoritesTable;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js",["134"],"import React, { useEffect } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteButton from \"@material-ui/icons/Delete\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { SET_SHOPPING_LIST, LOADING } from \"../utils/actions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nexport default function CheckboxList() {\n  const [state, dispatch] = useStoreContext();\n\n  const dummyShoppingListData = [\n    {\n      id: 0,\n      ingredientName: \"Garlic\",\n      checked: false,\n    },\n    {\n      id: 2,\n      ingredientName: \"Parmesan\",\n      checked: true,\n    },\n    {\n      id: 3,\n      ingredientName: \"Salt\",\n      checked: false,\n    },\n  ];\n\n  const setShoppingList = () => {\n    dispatch({ type: LOADING, loading: true });\n    setTimeout(function () {\n      dispatch({\n        type: SET_SHOPPING_LIST,\n        shoppingList: dummyShoppingListData,\n      });\n    }, 1500);\n  };\n\n  // WILL BE AN API CALL\n  const removeFromList = id => {\n    const shorterList = state.shoppingList.filter(item => item.id !== id);\n    dispatch({\n      type: SET_SHOPPING_LIST,\n      shoppingList: shorterList,\n    });\n  };\n\n  useEffect(() => {\n    setShoppingList();\n  }, []);\n\n  const handleToggle = value => () => {\n    value.checked = !value.checked;\n    const updateShoppingList = state.shoppingList.map(item =>\n      item.id === value.id ? value : item\n    );\n\n    dispatch({\n      type: SET_SHOPPING_LIST,\n      shoppingList: updateShoppingList,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {state.loading ? (\n        <Grid container item direction='row' justify='center'>\n          <Grid item>\n            <CircularProgress color='secondary' />\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid container item direction='row' justify='center'>\n          {state.shoppingList.length > 0 ? (\n            <Grid item xs={12}>\n              <Fade in={!state.loading}>\n                <List>\n                  {state.shoppingList.map((value, index) => (\n                    <ListItem\n                      key={value.id}\n                      role={undefined}\n                      dense\n                      button\n                      onClick={handleToggle(value)}>\n                      <ListItemIcon>\n                        <Checkbox\n                          edge='start'\n                          checked={value.checked}\n                          tabIndex={-1}\n                          disableRipple\n                          inputProps={{\n                            \"aria-labelledby\": `checkbox-list-label-${value.id}`,\n                          }}\n                        />\n                      </ListItemIcon>\n                      <ListItemText\n                        id={`checkbox-list-label-${value.id}`}\n                        primary={`${value.ingredientName}`}\n                      />\n                      <ListItemSecondaryAction>\n                        <Tooltip title='Delete from list'>\n                          <IconButton\n                            edge='end'\n                            aria-label='comments'\n                            onClick={() => removeFromList(value.id)}>\n                            <DeleteButton />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </Fade>\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item>\n                <Typography variant='subtitle1'>\n                  No items found in your shopping list\n                </Typography>\n                {/* TO BE DELETED */}\n                <button onClick={() => setShoppingList()}>\n                  POPULATE DUMMY DATA\n                </button>\n              </Grid>\n            </React.Fragment>\n          )}\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n}\n",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":3,"column":10,"nodeType":"141","messageId":"142","endLine":3,"endColumn":20},{"ruleId":"139","severity":1,"message":"143","line":3,"column":22,"nodeType":"141","messageId":"142","endLine":3,"endColumn":33},{"ruleId":"139","severity":1,"message":"144","line":6,"column":8,"nodeType":"141","messageId":"142","endLine":6,"endColumn":14},{"ruleId":"139","severity":1,"message":"145","line":9,"column":21,"nodeType":"141","messageId":"142","endLine":9,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":41,"column":14,"nodeType":"148","endLine":41,"endColumn":51},{"ruleId":"139","severity":1,"message":"149","line":11,"column":8,"nodeType":"141","messageId":"142","endLine":11,"endColumn":11},{"ruleId":"139","severity":1,"message":"145","line":10,"column":21,"nodeType":"141","messageId":"142","endLine":10,"endColumn":33},{"ruleId":"139","severity":1,"message":"150","line":30,"column":11,"nodeType":"141","messageId":"142","endLine":30,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":39,"column":32,"nodeType":"153","messageId":"154","endLine":39,"endColumn":34},{"ruleId":"155","severity":1,"message":"156","line":1,"column":1,"nodeType":"157","endLine":28,"endColumn":3},{"ruleId":"139","severity":1,"message":"158","line":6,"column":12,"nodeType":"141","messageId":"142","endLine":6,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":69,"column":6,"nodeType":"161","endLine":69,"endColumn":8,"suggestions":"162"},{"ruleId":"159","severity":1,"message":"163","line":60,"column":6,"nodeType":"161","endLine":60,"endColumn":8,"suggestions":"164"},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'LOGIN_USER' is defined but never used.","Identifier","unusedVar","'LOGOUT_USER' is defined but never used.","'Logout' is defined but never used.","'authDispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'API' is defined but never used.","'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'authState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.","ArrayExpression",["167"],"React Hook useEffect has a missing dependency: 'setShoppingList'. Either include it or remove the dependency array.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [setFavorites]",{"range":"173","text":"174"},"Update the dependencies array to be: [setShoppingList]",{"range":"175","text":"176"},[1938,1940],"[setFavorites]",[1809,1811],"[setShoppingList]"]