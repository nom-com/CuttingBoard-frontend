[{"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js":"1","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js":"2","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js":"3","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js":"4","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js":"5","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js":"6","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js":"7","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js":"8","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js":"9","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js":"10","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js":"11","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js":"12","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js":"13","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js":"14","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js":"15","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js":"16","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js":"17","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js":"18","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js":"19","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js":"20","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeCreateEditForm.js":"21","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\CreateEdit.js":"22"},{"size":457,"mtime":1608587344002,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":2067,"mtime":1609193488790,"results":"26","hashOfConfig":"24"},{"size":322,"mtime":1608587343997,"results":"27","hashOfConfig":"24"},{"size":1115,"mtime":1608587411945,"results":"28","hashOfConfig":"24"},{"size":1396,"mtime":1608587344008,"results":"29","hashOfConfig":"24"},{"size":1664,"mtime":1609192482160,"results":"30","hashOfConfig":"24"},{"size":8628,"mtime":1609182441204,"results":"31","hashOfConfig":"24"},{"size":636,"mtime":1609192482172,"results":"32","hashOfConfig":"24"},{"size":785,"mtime":1609192482168,"results":"33","hashOfConfig":"24"},{"size":963,"mtime":1608587343999,"results":"34","hashOfConfig":"24"},{"size":642,"mtime":1608587344010,"results":"35","hashOfConfig":"24"},{"size":488,"mtime":1609190324776,"results":"36","hashOfConfig":"24"},{"size":647,"mtime":1608769008780,"results":"37","hashOfConfig":"24"},{"size":2157,"mtime":1609190321104,"results":"38","hashOfConfig":"24"},{"size":176,"mtime":1609192482166,"results":"39","hashOfConfig":"24"},{"size":268,"mtime":1609192482175,"results":"40","hashOfConfig":"24"},{"size":164,"mtime":1609192482162,"results":"41","hashOfConfig":"24"},{"size":182,"mtime":1609192482180,"results":"42","hashOfConfig":"24"},{"size":167,"mtime":1609192482178,"results":"43","hashOfConfig":"24"},{"size":6743,"mtime":1609192598276,"results":"44","hashOfConfig":"24"},{"size":293,"mtime":1609193534805,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u01klj",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js",[],["99","100"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js",["101"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemLink from \"../components/ListItemLink\";\n// import AuthMenu from \"../components/AuthMenu\";\n// import { authContext } from \"../contexts/AuthContext\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport Logout from \"../components/Logout\";\n\nconst Nav = () => {\n  const [authState, authDispatch] = useAuthContext();\n  return (\n    <Grid\n      container\n      direction='row'\n      justify='flex-start'\n      alignItems='center'\n      p={5}>\n      <Grid item>\n        <ListItemLink to='/' primary='Home' />\n      </Grid>\n      <Grid item>\n        <ListItemLink to='/what' primary='404TEST' />\n      </Grid>\n      {authState.username ? (\n        <Grid item>\n            <Logout/>\n        </Grid>\n      ) : (\n        <Grid item>\n          <ListItemLink to='/login' primary='Login' />\n        </Grid>\n      )}\n      <Grid item>\n        <ListItemLink to='/signup' primary='Signup' />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Nav;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js",["102"],"import React from \"react\";\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Icon from \"@material-ui/core/Icon\";\nimport API from \"../utils/API\";\n\nconst signUpSubmit = (\n  values,\n  { setSubmitting, resetForm, setFieldError, setStatus }\n) => {\n  setTimeout(() => {\n    if (checkUniqueUsername(values.username, setFieldError, setStatus)) {\n      // USERNAME IS UNIQUE, FINALIZE CALL TO API\n      alert(JSON.stringify(values, null, 2));\n      resetForm();\n    } else {\n      // USERNAME EXISTS STOP SUBMISSION DON\"T CALL API\n    }\n    setSubmitting(false);\n  }, 1000);\n};\n\nconst checkUniqueUsername = (username, setFieldError, setStatus) => {\n  // call API to check username return true or false\n  // helper func\n  if (username.length < 8) {\n    setFieldError(\"username\", \"Username must contain at least 8 characters\");\n    return false;\n  }\n\n  if (username === \"dansirdan\") {\n    setFieldError(\"username\", \"This username already exists.\");\n  } else {\n    setStatus({ username: \"Looks good!\" });\n    return true;\n  }\n  return false;\n};\n\nconst SignUpForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    status,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFieldError,\n    setStatus,\n  } = props;\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <form\n          id='signup-form'\n          style={{\n            maxWidth: 600,\n            margin: \"auto\",\n            marginTop: 30,\n            padding: 20,\n\n          }}\n          noValidate\n          autoComplete='off'\n          onSubmit={handleSubmit}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Grid item>\n              <Typography variant='h2'>Create an Account</Typography>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.username && Boolean(errors.username)}\n                id='username'\n                label='Username'\n                value={values.username}\n                placeholder='foodie77'\n                helperText={\n                  touched.username && errors.username\n                    ? errors.username\n                    : status.username\n                    ? status.username\n                    : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n              <Grid container item justify='flex-end' alignItems='flex-end'>\n                <Button\n                  onClick={() =>\n                    checkUniqueUsername(\n                      values.username,\n                      setFieldError,\n                      setStatus\n                    )\n                  }\n                  variant='outlined'\n                  color='default'\n                  endIcon={<Icon>check</Icon>}>\n                  Check\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.email && Boolean(errors.email)}\n                id='email'\n                label='Email'\n                value={values.email}\n                placeholder='diners.driveins@foodnetwork.net'\n                helperText={touched.email && errors.email ? errors.email : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.firstName && Boolean(errors.firstName)}\n                id='firstName'\n                label='First Name'\n                value={values.firstName}\n                placeholder='Guy'\n                helperText={touched.firstName && errors.firstName ? errors.firstName : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.lastName && Boolean(errors.lastName)}\n                id='lastName'\n                label='Last Name'\n                value={values.lastName}\n                placeholder='Fieri'\n                helperText={touched.lastName && errors.lastName ? errors.lastName : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.password && Boolean(errors.password)}\n                id='password'\n                label='Password'\n                value={values.password}\n                type='password'\n                placeholder=''\n                helperText={touched.password && errors.password ? errors.password : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={\n                  touched.confirmPassword && Boolean(errors.confirmPassword)\n                }\n                id='confirmPassword'\n                label='Confirm Password'\n                value={values.confirmPassword}\n                type='password'\n                placeholder=''\n                helperText={\n                  touched.confirmPassword && errors.confirmPassword ? errors.confirmPassword : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n\n            <Grid container item justify='flex-end' alignItems='flex-end'>\n              <Button\n                type='submit'\n                variant='outlined'\n                color='default'\n                disabled={isSubmitting}\n                endIcon={<Icon>send</Icon>}>\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nconst UserAccountForm = withFormik({\n  mapPropsToValues: ({\n    username,\n    email,\n    firstName,\n    lastName,\n    password,\n    confirmPassword,\n  }) => {\n    return {\n      username: username || \"\",\n      email: email || \"\",\n      firstName: firstName || \"\",\n      lastName: lastName || \"\",\n      password: password || \"\",\n      confirmPassword: confirmPassword || \"\",\n    };\n  },\n  mapPropsToStatus: ({ username }) => {\n    return {\n      username: username || \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    username: Yup.string()\n      .min(8, \"Username must contain at least 8 characters\")\n      .required(\"Enter a username\"),\n    email: Yup.string()\n      .email(\"Enter a valid email\")\n      .required(\"Email is required\"),\n    firstName: Yup.string().required(\"Required\"),\n    lastName: Yup.string().required(\"Required\"),\n    password: Yup.string()\n      .min(8, \"Password must contain at least 8 characters\")\n      .required(\"Enter your password\"),\n    confirmPassword: Yup.string()\n      .required(\"Confirm your password\")\n      .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\n  }),\n  handleSubmit: signUpSubmit,\n})(SignUpForm);\n\nexport default UserAccountForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js",["103","104","105","106"],"import React from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport { LOGIN_USER, LOGOUT_USER } from \"../utils/actions\";\nimport LoginForm from \"../components/LoginForm\";\nimport Container from \"@material-ui/core/Container\";\nimport Logout from \"../components/Logout\";\n\nconst Landing = () => {\n\n  const [authState, authDispatch] = useAuthContext();\n\n  return (\n    <Container>\n      <div>\n        {authState.username ? (\n          <div>\n            Welcome back, {authState.username}\n          </div>\n        ) : (\n          <LoginForm/>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default Landing;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js",["107"],"import React from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport { LOGOUT_USER } from \"../utils/actions\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\n\nconst Logout = () => {\n    const [authState, authDispatch] = useAuthContext();\n    \n    return (\n        <Container>\n            <Button onClick={() => authDispatch({ type: LOGOUT_USER })}>Logout</Button>\n        </Container>\n    )\n}\n\nexport default Logout;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\API.js",["108","109"],"import axios from \"axios\";\n\nexport default {\n  /* baseURL: \"http://\",\n  \n    TODO create API Object methods\n    \n    doLogin: function(loginObj) {\n        return axios.post(this.baseURL + \"/login\", loginObj )\n    }\n    */\n\n   doLogin: async function (userData) {\n     return await new Promise((resolve, reject) => {\n       //Simulate server request speed with 200ms ping\n      setTimeout(() => {\n        //Dummy Data for Testing until Back-end is finished\n        if (userData.username === \"a\" && userData.password === \"a\")\n        {\n          resolve();\n        }\n        else\n        {\n          reject();\n        }\n      }, 200)\n     })\n  }\n};\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js",["110","111"],"import React, {useState} from \"react\";\nimport { useAuthContext } from \"../utils/AuthContext\";\nimport { LOGIN_USER } from \"../utils/actions\";\nimport doLogin from \"../utils/API\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\n\nconst LoginForm = () => {\n\n  //State Storage\n  const [authState, authDispatch] = useAuthContext();\n  //Temporary storage for the user form\n  const [userForm, setUserForm] = useState({username: \"\", password: \"\"});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    /*authDispatch({ type: LOGIN_USER, username: authState.username, admin: false })*/\n    doLogin.doLogin(userForm)\n    .then (() => {\n        authState.username = userForm.username;\n        authDispatch({ type: LOGIN_USER, username: authState.username, admin: false});\n        console.log(\"Login Successful\");\n    })\n    .catch (() => {\n        setErrorMessage(\"Incorrect Username or Password\");\n        console.log(\"Incorrect Username or Password\");\n    })\n\n    const handleFormUpdate = (event, value) => {\n        setUserForm({...userForm, value: event.target.value})\n    }\n}\n  return (\n    <Container>\n        <form>\n            <div id=\"login-form\">\n            <h1>Login</h1>\n                {(errorMessage != \"\") ? (<div className=\"error-message\">{errorMessage}</div>) : \"\"}\n                <div className=\"form-group\">\n                    <TextField name=\"username\" id=\"username\" value={userForm.username} onChange={e => setUserForm({...userForm, username: e.target.value})}label=\"Username\"/>\n                </div>\n                <div className=\"form-group\">\n                    <TextField type=\"password\" name=\"password\" id=\"password\" value={userForm.password} onChange={e => setUserForm({...userForm, password: e.target.value})} label=\"Password\"/>\n                </div>\n                <Button\n                    onClick={handleSubmit}>\n                    Login\n                </Button>\n            </div>\n        </form>\n      </Container>\n  );\n};\n\nexport default LoginForm;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js",["112"],"import React from \"react\";\n\nconst dummyRecipeObj = {};\n\nconst Recipe = (props) => {\n\n  //  useEffect to API get by ID etc...\n  return (\n    <div className='page-body-content'>\n      <h1>Recipe ID: {props.match.params.id}</h1>\n    </div>\n  );\n};\n\nexport default Recipe;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeCreateEditForm.js",["113"],"import React from \"react\";\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport API from \"../utils/API\";\n\nconst recipeSubmit = (\n  values,\n  { setSubmitting, resetForm, setFieldError, setStatus }\n) => {\n  setTimeout(() => {\n    // USERNAME IS UNIQUE, FINALIZE CALL TO API\n    alert(JSON.stringify(values, null, 2));\n    // resetForm();\n    // USERNAME EXISTS STOP SUBMISSION DON\"T CALL API\n    setSubmitting(false);\n  }, 1000);\n};\n\nconst RecipeForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n  } = props;\n\n  const recipeCategory = [\n    {\n      value: \"soup\",\n      label: \"Soup\",\n    },\n    {\n      value: \"pasta\",\n      label: \"Pasta\",\n    },\n    {\n      value: \"dessert\",\n      label: \"Dessert\",\n    },\n  ];\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <form\n          id='recipe-form'\n          style={{\n            maxWidth: 600,\n            margin: \"auto\",\n            marginTop: 30,\n            padding: 20,\n          }}\n          noValidate\n          autoComplete='off'\n          onSubmit={handleSubmit}>\n          <Grid container direction='row' justify='center' alignItems='center'>\n            <Grid item>\n              <Typography variant='h2'>Create/Edit Recipe</Typography>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.title && Boolean(errors.title)}\n                id='title'\n                label='Title'\n                value={values.title}\n                placeholder='Brown Butter Chicken'\n                helperText={touched.title && errors.title ? errors.title : \" \"}\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.imageLocation && Boolean(errors.imageLocation)}\n                id='imageLocation'\n                label='Image URL'\n                value={values.imageLocation}\n                helperText={\n                  touched.imageLocation && errors.imageLocation\n                    ? errors.imageLocation\n                    : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                margin='dense'\n                size='small'\n                error={touched.description && Boolean(errors.description)}\n                id='description'\n                label='Description'\n                multiline\n                rows={4}\n                placeholder='A delicious and savory take on the classic...'\n                value={values.description}\n                helperText={\n                  touched.description && errors.description\n                    ? errors.description\n                    : \" \"\n                }\n                fullWidth\n                onChange={handleChange}\n                onBlur={handleBlur}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={values.isPublic}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    name='isPublic'\n                    inputProps={{ \"aria-label\": \"make public or private\" }}\n                  />\n                }\n                label={\n                  values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\n                }\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                select\n                id='category'\n                name='category'\n                label='Recipe Category'\n                margin='dense'\n                variant='outlined'\n                error={touched.category && Boolean(errors.category)}\n                onChange={handleChange}\n                value={values.category}\n                helperText={\n                    touched.category && errors.category\n                      ? errors.category\n                      : \" \"\n                  }\n                fullWidth>\n                {recipeCategory.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid container item justify='flex-end' alignItems='flex-end'>\n              <Button\n                type='submit'\n                variant='outlined'\n                color='default'\n                disabled={isSubmitting}\n                endIcon={<Icon>send</Icon>}>\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </div>\n  );\n};\n\nconst RecipeCreateEditForm = withFormik({\n  mapPropsToValues: ({\n    title,\n    imageLocation,\n    description,\n    isPublic,\n    category,\n  }) => {\n    return {\n      title: title || \"\",\n      imageLocation: imageLocation || \"\",\n      description: description || \"\",\n      isPublic: isPublic || true,\n      category: category || \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string()\n      .min(5, \"Title must contain at least 5 characters\")\n      .required(\"Enter a recipe title\"),\n    imageLocation: Yup.string(),\n    description: Yup.string().required(\"Required\"),\n    isPublic: Yup.boolean(),\n    category: Yup.string().required(\"Select a recipe category\"),\n  }),\n  handleSubmit: recipeSubmit,\n})(RecipeForm);\n\nexport default RecipeCreateEditForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\CreateEdit.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":10,"column":21,"nodeType":"120","messageId":"121","endLine":10,"endColumn":33},{"ruleId":"118","severity":1,"message":"122","line":11,"column":8,"nodeType":"120","messageId":"121","endLine":11,"endColumn":11},{"ruleId":"118","severity":1,"message":"123","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":20},{"ruleId":"118","severity":1,"message":"124","line":3,"column":22,"nodeType":"120","messageId":"121","endLine":3,"endColumn":33},{"ruleId":"118","severity":1,"message":"125","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":9,"column":21,"nodeType":"120","messageId":"121","endLine":9,"endColumn":33},{"ruleId":"118","severity":1,"message":"126","line":8,"column":12,"nodeType":"120","messageId":"121","endLine":8,"endColumn":21},{"ruleId":"118","severity":1,"message":"127","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"129","line":3,"column":1,"nodeType":"130","endLine":29,"endColumn":3},{"ruleId":"118","severity":1,"message":"131","line":31,"column":11,"nodeType":"120","messageId":"121","endLine":31,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":40,"column":32,"nodeType":"134","messageId":"135","endLine":40,"endColumn":34},{"ruleId":"118","severity":1,"message":"136","line":3,"column":7,"nodeType":"120","messageId":"121","endLine":3,"endColumn":21},{"ruleId":"118","severity":1,"message":"122","line":14,"column":8,"nodeType":"120","messageId":"121","endLine":14,"endColumn":11},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'authDispatch' is assigned a value but never used.","Identifier","unusedVar","'API' is defined but never used.","'LOGIN_USER' is defined but never used.","'LOGOUT_USER' is defined but never used.","'Logout' is defined but never used.","'authState' is assigned a value but never used.","'axios' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dummyRecipeObj' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]