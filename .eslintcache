[{"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\index.js":"1","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\reportWebVitals.js":"2","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\App.js":"3","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\AuthContext.js":"4","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Footer.js":"5","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\GlobalState.js":"6","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Admin.js":"7","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Login.js":"8","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Landing.js":"9","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Favorites.js":"10","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Recipe.js":"11","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\UserAccount.js":"12","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js":"13","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Search.js":"14","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeCreateEditForm.js":"15","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Nav.js":"16","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\actions.js":"17","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\API.js":"18","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\ListItemLink.js":"19","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Logout.js":"20","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\LoginForm.js":"21"},{"size":472,"mtime":1608587344661,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1608566476494,"results":"24","hashOfConfig":"23"},{"size":2160,"mtime":1609210262515,"results":"25","hashOfConfig":"23"},{"size":1170,"mtime":1608587706910,"results":"26","hashOfConfig":"23"},{"size":335,"mtime":1608587344657,"results":"27","hashOfConfig":"23"},{"size":1476,"mtime":1608587344667,"results":"28","hashOfConfig":"23"},{"size":175,"mtime":1609192707607,"results":"29","hashOfConfig":"23"},{"size":660,"mtime":1609192707611,"results":"30","hashOfConfig":"23"},{"size":815,"mtime":1609192707610,"results":"31","hashOfConfig":"23"},{"size":187,"mtime":1609192707609,"results":"32","hashOfConfig":"23"},{"size":2239,"mtime":1609213421378,"results":"33","hashOfConfig":"23"},{"size":193,"mtime":1609192707615,"results":"34","hashOfConfig":"23"},{"size":8909,"mtime":1609184492700,"results":"35","hashOfConfig":"23"},{"size":178,"mtime":1609192707614,"results":"36","hashOfConfig":"23"},{"size":6968,"mtime":1609192707606,"results":"37","hashOfConfig":"23"},{"size":1725,"mtime":1609192707605,"results":"38","hashOfConfig":"23"},{"size":659,"mtime":1608587344668,"results":"39","hashOfConfig":"23"},{"size":676,"mtime":1609183144198,"results":"40","hashOfConfig":"23"},{"size":997,"mtime":1608587344659,"results":"41","hashOfConfig":"23"},{"size":504,"mtime":1609190412439,"results":"42","hashOfConfig":"23"},{"size":2213,"mtime":1609190417196,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1dydghi",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\index.js",[],["94","95"],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\reportWebVitals.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\App.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\AuthContext.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Footer.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\GlobalState.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Admin.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Login.js",["96","97","98","99"],"import React from \"react\";\r\nimport { useAuthContext } from \"../utils/AuthContext\";\r\nimport { LOGIN_USER, LOGOUT_USER } from \"../utils/actions\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Logout from \"../components/Logout\";\r\n\r\nconst Landing = () => {\r\n  const [authState, authDispatch] = useAuthContext();\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Container>\r\n        {authState.username ? (\r\n          <div>Welcome back, {authState.username}</div>\r\n        ) : (\r\n          <LoginForm />\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Landing.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Favorites.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Recipe.js",["100"],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\UserAccount.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js",["101"],"import React from \"react\";\r\nimport { withFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport API from \"../utils/API\";\r\n\r\nconst signUpSubmit = (\r\n  values,\r\n  { setSubmitting, resetForm, setFieldError, setStatus }\r\n) => {\r\n  setTimeout(() => {\r\n    if (checkUniqueUsername(values.username, setFieldError, setStatus)) {\r\n      // USERNAME IS UNIQUE, FINALIZE CALL TO API\r\n      alert(JSON.stringify(values, null, 2));\r\n      resetForm();\r\n    } else {\r\n      // USERNAME EXISTS STOP SUBMISSION DON\"T CALL API\r\n    }\r\n    setSubmitting(false);\r\n  }, 1000);\r\n};\r\n\r\nconst checkUniqueUsername = (username, setFieldError, setStatus) => {\r\n  // call API to check username return true or false\r\n  // helper func\r\n  if (username.length < 8) {\r\n    setFieldError(\"username\", \"Username must contain at least 8 characters\");\r\n    return false;\r\n  }\r\n\r\n  if (username === \"dansirdan\") {\r\n    setFieldError(\"username\", \"This username already exists.\");\r\n  } else {\r\n    setStatus({ username: \"Looks good!\" });\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst SignUpForm = props => {\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    status,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldError,\r\n    setStatus,\r\n  } = props;\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        <form\r\n          id='signup-form'\r\n          style={{\r\n            maxWidth: 600,\r\n            margin: \"auto\",\r\n            marginTop: 30,\r\n            padding: 20,\r\n\r\n          }}\r\n          noValidate\r\n          autoComplete='off'\r\n          onSubmit={handleSubmit}>\r\n          <Grid container direction='row' justify='center' alignItems='center'>\r\n            <Grid item>\r\n              <Typography variant='h2'>Create an Account</Typography>\r\n              <Divider />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.username && Boolean(errors.username)}\r\n                id='username'\r\n                label='Username'\r\n                value={values.username}\r\n                placeholder='foodie77'\r\n                helperText={\r\n                  touched.username && errors.username\r\n                    ? errors.username\r\n                    : status.username\r\n                    ? status.username\r\n                    : \" \"\r\n                }\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n              <Grid container item justify='flex-end' alignItems='flex-end'>\r\n                <Button\r\n                  onClick={() =>\r\n                    checkUniqueUsername(\r\n                      values.username,\r\n                      setFieldError,\r\n                      setStatus\r\n                    )\r\n                  }\r\n                  variant='outlined'\r\n                  color='default'\r\n                  endIcon={<Icon>check</Icon>}>\r\n                  Check\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.email && Boolean(errors.email)}\r\n                id='email'\r\n                label='Email'\r\n                value={values.email}\r\n                placeholder='diners.driveins@foodnetwork.net'\r\n                helperText={touched.email && errors.email ? errors.email : \" \"}\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.firstName && Boolean(errors.firstName)}\r\n                id='firstName'\r\n                label='First Name'\r\n                value={values.firstName}\r\n                placeholder='Guy'\r\n                helperText={touched.firstName && errors.firstName ? errors.firstName : \" \"}\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.lastName && Boolean(errors.lastName)}\r\n                id='lastName'\r\n                label='Last Name'\r\n                value={values.lastName}\r\n                placeholder='Fieri'\r\n                helperText={touched.lastName && errors.lastName ? errors.lastName : \" \"}\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.password && Boolean(errors.password)}\r\n                id='password'\r\n                label='Password'\r\n                value={values.password}\r\n                type='password'\r\n                placeholder=''\r\n                helperText={touched.password && errors.password ? errors.password : \" \"}\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={\r\n                  touched.confirmPassword && Boolean(errors.confirmPassword)\r\n                }\r\n                id='confirmPassword'\r\n                label='Confirm Password'\r\n                value={values.confirmPassword}\r\n                type='password'\r\n                placeholder=''\r\n                helperText={\r\n                  touched.confirmPassword && errors.confirmPassword ? errors.confirmPassword : \" \"\r\n                }\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n\r\n            <Grid container item justify='flex-end' alignItems='flex-end'>\r\n              <Button\r\n                type='submit'\r\n                variant='outlined'\r\n                color='default'\r\n                disabled={isSubmitting}\r\n                endIcon={<Icon>send</Icon>}>\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserAccountForm = withFormik({\r\n  mapPropsToValues: ({\r\n    username,\r\n    email,\r\n    firstName,\r\n    lastName,\r\n    password,\r\n    confirmPassword,\r\n  }) => {\r\n    return {\r\n      username: username || \"\",\r\n      email: email || \"\",\r\n      firstName: firstName || \"\",\r\n      lastName: lastName || \"\",\r\n      password: password || \"\",\r\n      confirmPassword: confirmPassword || \"\",\r\n    };\r\n  },\r\n  mapPropsToStatus: ({ username }) => {\r\n    return {\r\n      username: username || \"\",\r\n    };\r\n  },\r\n  validationSchema: Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(8, \"Username must contain at least 8 characters\")\r\n      .required(\"Enter a username\"),\r\n    email: Yup.string()\r\n      .email(\"Enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    firstName: Yup.string().required(\"Required\"),\r\n    lastName: Yup.string().required(\"Required\"),\r\n    password: Yup.string()\r\n      .min(8, \"Password must contain at least 8 characters\")\r\n      .required(\"Enter your password\"),\r\n    confirmPassword: Yup.string()\r\n      .required(\"Confirm your password\")\r\n      .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\r\n  }),\r\n  handleSubmit: signUpSubmit,\r\n})(SignUpForm);\r\n\r\nexport default UserAccountForm;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Search.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeCreateEditForm.js",["102"],"import React from \"react\";\r\nimport { withFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport API from \"../utils/API\";\r\n\r\nconst recipeSubmit = (\r\n  values,\r\n  { setSubmitting, resetForm, setFieldError, setStatus }\r\n) => {\r\n  setTimeout(() => {\r\n    // USERNAME IS UNIQUE, FINALIZE CALL TO API\r\n    alert(JSON.stringify(values, null, 2));\r\n    // resetForm();\r\n    // USERNAME EXISTS STOP SUBMISSION DON\"T CALL API\r\n    setSubmitting(false);\r\n  }, 1000);\r\n};\r\n\r\nconst RecipeForm = props => {\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n  } = props;\r\n\r\n  const recipeCategory = [\r\n    {\r\n      value: \"soup\",\r\n      label: \"Soup\",\r\n    },\r\n    {\r\n      value: \"pasta\",\r\n      label: \"Pasta\",\r\n    },\r\n    {\r\n      value: \"dessert\",\r\n      label: \"Dessert\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        <form\r\n          id='recipe-form'\r\n          style={{\r\n            maxWidth: 600,\r\n            margin: \"auto\",\r\n            marginTop: 30,\r\n            padding: 20,\r\n          }}\r\n          noValidate\r\n          autoComplete='off'\r\n          onSubmit={handleSubmit}>\r\n          <Grid container direction='row' justify='center' alignItems='center'>\r\n            <Grid item>\r\n              <Typography variant='h2'>Create/Edit Recipe</Typography>\r\n              <Divider />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.title && Boolean(errors.title)}\r\n                id='title'\r\n                label='Title'\r\n                value={values.title}\r\n                placeholder='Brown Butter Chicken'\r\n                helperText={touched.title && errors.title ? errors.title : \" \"}\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.imageLocation && Boolean(errors.imageLocation)}\r\n                id='imageLocation'\r\n                label='Image URL'\r\n                value={values.imageLocation}\r\n                helperText={\r\n                  touched.imageLocation && errors.imageLocation\r\n                    ? errors.imageLocation\r\n                    : \" \"\r\n                }\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                margin='dense'\r\n                size='small'\r\n                error={touched.description && Boolean(errors.description)}\r\n                id='description'\r\n                label='Description'\r\n                multiline\r\n                rows={4}\r\n                placeholder='A delicious and savory take on the classic...'\r\n                value={values.description}\r\n                helperText={\r\n                  touched.description && errors.description\r\n                    ? errors.description\r\n                    : \" \"\r\n                }\r\n                fullWidth\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant='outlined'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={values.isPublic}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    name='isPublic'\r\n                    inputProps={{ \"aria-label\": \"make public or private\" }}\r\n                  />\r\n                }\r\n                label={\r\n                  values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                select\r\n                id='category'\r\n                name='category'\r\n                label='Recipe Category'\r\n                margin='dense'\r\n                variant='outlined'\r\n                error={touched.category && Boolean(errors.category)}\r\n                onChange={handleChange}\r\n                value={values.category}\r\n                helperText={\r\n                    touched.category && errors.category\r\n                      ? errors.category\r\n                      : \" \"\r\n                  }\r\n                fullWidth>\r\n                {recipeCategory.map(option => (\r\n                  <MenuItem key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </Grid>\r\n            <Grid container item justify='flex-end' alignItems='flex-end'>\r\n              <Button\r\n                type='submit'\r\n                variant='outlined'\r\n                color='default'\r\n                disabled={isSubmitting}\r\n                endIcon={<Icon>send</Icon>}>\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RecipeCreateEditForm = withFormik({\r\n  mapPropsToValues: ({\r\n    title,\r\n    imageLocation,\r\n    description,\r\n    isPublic,\r\n    category,\r\n  }) => {\r\n    return {\r\n      title: title || \"\",\r\n      imageLocation: imageLocation || \"\",\r\n      description: description || \"\",\r\n      isPublic: isPublic || true,\r\n      category: category || \"\",\r\n    };\r\n  },\r\n  validationSchema: Yup.object().shape({\r\n    title: Yup.string()\r\n      .min(5, \"Title must contain at least 5 characters\")\r\n      .required(\"Enter a recipe title\"),\r\n    imageLocation: Yup.string(),\r\n    description: Yup.string().required(\"Required\"),\r\n    isPublic: Yup.boolean(),\r\n    category: Yup.string().required(\"Select a recipe category\"),\r\n  }),\r\n  handleSubmit: recipeSubmit,\r\n})(RecipeForm);\r\n\r\nexport default RecipeCreateEditForm;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Nav.js",["103"],"import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItemLink from \"../components/ListItemLink\";\r\n// import AuthMenu from \"../components/AuthMenu\";\r\n// import { authContext } from \"../contexts/AuthContext\";\r\nimport { useAuthContext } from \"../utils/AuthContext\";\r\nimport Logout from \"../components/Logout\";\r\n\r\nconst Nav = () => {\r\n  const [authState, authDispatch] = useAuthContext();\r\n  return (\r\n    <Grid\r\n      container\r\n      direction='row'\r\n      justify='flex-start'\r\n      alignItems='center'\r\n      p={5}>\r\n      <Grid item>\r\n        <ListItemLink to='/' primary='Home' />\r\n      </Grid>\r\n      <Grid item>\r\n        <ListItemLink to='/recipe/12' primary='Recipe' />\r\n      </Grid>\r\n      <Grid item>\r\n        <ListItemLink to='/search' primary='Search' />\r\n      </Grid>\r\n      {authState.username ? (\r\n        <React.Fragment>\r\n          {authState.admin ? (\r\n            <Grid item>\r\n            <ListItemLink to='/admin' primary='Admin' />\r\n          </Grid>\r\n          ) : (\r\n            <React.Fragment></React.Fragment>\r\n          )}\r\n          <Grid item>\r\n            <ListItemLink to='/favorites' primary='Favorites' />\r\n          </Grid>\r\n          <Grid item>\r\n            <ListItemLink to='/user-account' primary='User Account' />\r\n          </Grid>\r\n          <Grid item>\r\n            <Logout />\r\n          </Grid>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n\r\n        <Grid item>\r\n          <ListItemLink to='/login' primary='Login' />\r\n        </Grid>\r\n              <Grid item>\r\n              <ListItemLink to='/signup' primary='Signup' />\r\n            </Grid>\r\n        </React.Fragment>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\actions.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\API.js",["104","105"],"import axios from \"axios\";\r\n\r\nexport default {\r\n  /* baseURL: \"http://\",\r\n  \r\n    TODO create API Object methods\r\n    \r\n    doLogin: function(loginObj) {\r\n        return axios.post(this.baseURL + \"/login\", loginObj )\r\n    }\r\n    */\r\n\r\n   doLogin: async function (userData) {\r\n     return await new Promise((resolve, reject) => {\r\n       //Simulate server request speed with 200ms ping\r\n      setTimeout(() => {\r\n        //Dummy Data for Testing until Back-end is finished\r\n        if (userData.username === \"a\" && userData.password === \"a\")\r\n        {\r\n          resolve();\r\n        }\r\n        else\r\n        {\r\n          reject();\r\n        }\r\n      }, 200)\r\n     })\r\n  }\r\n};\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\ListItemLink.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Logout.js",["106"],"import React from \"react\";\r\nimport { useAuthContext } from \"../utils/AuthContext\";\r\nimport { LOGOUT_USER } from \"../utils/actions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst Logout = () => {\r\n    const [authState, authDispatch] = useAuthContext();\r\n    \r\n    return (\r\n        <Container>\r\n            <Button onClick={() => authDispatch({ type: LOGOUT_USER })}>Logout</Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Logout;","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\LoginForm.js",["107","108"],"import React, {useState} from \"react\";\r\nimport { useAuthContext } from \"../utils/AuthContext\";\r\nimport { LOGIN_USER } from \"../utils/actions\";\r\nimport doLogin from \"../utils/API\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst LoginForm = () => {\r\n\r\n  //State Storage\r\n  const [authState, authDispatch] = useAuthContext();\r\n  //Temporary storage for the user form\r\n  const [userForm, setUserForm] = useState({username: \"\", password: \"\"});\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    /*authDispatch({ type: LOGIN_USER, username: authState.username, admin: false })*/\r\n    doLogin.doLogin(userForm)\r\n    .then (() => {\r\n        authState.username = userForm.username;\r\n        authDispatch({ type: LOGIN_USER, username: authState.username, admin: false});\r\n        console.log(\"Login Successful\");\r\n    })\r\n    .catch (() => {\r\n        setErrorMessage(\"Incorrect Username or Password\");\r\n        console.log(\"Incorrect Username or Password\");\r\n    })\r\n\r\n    const handleFormUpdate = (event, value) => {\r\n        setUserForm({...userForm, value: event.target.value})\r\n    }\r\n}\r\n  return (\r\n    <Container>\r\n        <form>\r\n            <div id=\"login-form\">\r\n            <h1>Login</h1>\r\n                {(errorMessage != \"\") ? (<div className=\"error-message\">{errorMessage}</div>) : \"\"}\r\n                <div className=\"form-group\">\r\n                    <TextField name=\"username\" id=\"username\" value={userForm.username} onChange={e => setUserForm({...userForm, username: e.target.value})}label=\"Username\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <TextField type=\"password\" name=\"password\" id=\"password\" value={userForm.password} onChange={e => setUserForm({...userForm, password: e.target.value})} label=\"Password\"/>\r\n                </div>\r\n                <Button\r\n                    onClick={handleSubmit}>\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </form>\r\n      </Container>\r\n  );\r\n};\r\n\r\nexport default LoginForm;",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":20},{"ruleId":"113","severity":1,"message":"117","line":3,"column":22,"nodeType":"115","messageId":"116","endLine":3,"endColumn":33},{"ruleId":"113","severity":1,"message":"118","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":14},{"ruleId":"113","severity":1,"message":"119","line":9,"column":21,"nodeType":"115","messageId":"116","endLine":9,"endColumn":33},{"ruleId":"120","severity":1,"message":"121","line":39,"column":14,"nodeType":"122","endLine":39,"endColumn":51},{"ruleId":"113","severity":1,"message":"123","line":11,"column":8,"nodeType":"115","messageId":"116","endLine":11,"endColumn":11},{"ruleId":"113","severity":1,"message":"123","line":14,"column":8,"nodeType":"115","messageId":"116","endLine":14,"endColumn":11},{"ruleId":"113","severity":1,"message":"119","line":10,"column":21,"nodeType":"115","messageId":"116","endLine":10,"endColumn":33},{"ruleId":"113","severity":1,"message":"124","line":1,"column":8,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":3,"column":1,"nodeType":"127","endLine":29,"endColumn":3},{"ruleId":"113","severity":1,"message":"128","line":8,"column":12,"nodeType":"115","messageId":"116","endLine":8,"endColumn":21},{"ruleId":"113","severity":1,"message":"129","line":31,"column":11,"nodeType":"115","messageId":"116","endLine":31,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":40,"column":32,"nodeType":"132","messageId":"133","endLine":40,"endColumn":34},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'LOGIN_USER' is defined but never used.","Identifier","unusedVar","'LOGOUT_USER' is defined but never used.","'Logout' is defined but never used.","'authDispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'API' is defined but never used.","'axios' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'authState' is assigned a value but never used.","'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]