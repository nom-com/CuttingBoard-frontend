[{"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\index.js":"1","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\reportWebVitals.js":"2","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\App.js":"3","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Login.js":"4","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Admin.js":"5","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\GlobalState.js":"6","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\UserAccount.js":"7","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Landing.js":"8","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\AuthContext.js":"9","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Search.js":"10","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Footer.js":"11","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Favorites.js":"12","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\ShoppingList.js":"13","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Recipe.js":"14","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\NewRecipe.js":"15","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Nav.js":"16","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js":"17","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\LoginForm.js":"18","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\actions.js":"19","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeGlanceFrame.js":"20","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\FavoritesTable.js":"21","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\IngredientsList.js":"22","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\auth.service.js":"23","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\ListItemLink.js":"24","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Logout.js":"25","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"26","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js":"27","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"28","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"29","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeGlanceCard.js":"30","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\api-url.js":"31","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\ingredient.service.js":"32","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\recipe.service.js":"33","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\category.service.js":"34","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\auth-header.js":"35"},{"size":472,"mtime":1608587344661,"results":"36","hashOfConfig":"37"},{"size":375,"mtime":1608566476494,"results":"38","hashOfConfig":"37"},{"size":2250,"mtime":1609558444425,"results":"39","hashOfConfig":"37"},{"size":531,"mtime":1609641413938,"results":"40","hashOfConfig":"37"},{"size":175,"mtime":1609192707607,"results":"41","hashOfConfig":"37"},{"size":2769,"mtime":1609558444441,"results":"42","hashOfConfig":"37"},{"size":193,"mtime":1609192707615,"results":"43","hashOfConfig":"37"},{"size":1605,"mtime":1609607855188,"results":"44","hashOfConfig":"37"},{"size":1098,"mtime":1609364614987,"results":"45","hashOfConfig":"37"},{"size":178,"mtime":1609192707614,"results":"46","hashOfConfig":"37"},{"size":335,"mtime":1608587344657,"results":"47","hashOfConfig":"37"},{"size":1008,"mtime":1609374600436,"results":"48","hashOfConfig":"37"},{"size":1031,"mtime":1609558444441,"results":"49","hashOfConfig":"37"},{"size":6636,"mtime":1609695773308,"results":"50","hashOfConfig":"37"},{"size":899,"mtime":1609632956542,"results":"51","hashOfConfig":"37"},{"size":1602,"mtime":1609632956526,"results":"52","hashOfConfig":"37"},{"size":11599,"mtime":1609632956542,"results":"53","hashOfConfig":"37"},{"size":2572,"mtime":1609700884665,"results":"54","hashOfConfig":"37"},{"size":784,"mtime":1609364614989,"results":"55","hashOfConfig":"37"},{"size":7979,"mtime":1609643569009,"results":"56","hashOfConfig":"37"},{"size":4904,"mtime":1609558444425,"results":"57","hashOfConfig":"37"},{"size":4625,"mtime":1609558444433,"results":"58","hashOfConfig":"37"},{"size":684,"mtime":1609607855190,"results":"59","hashOfConfig":"37"},{"size":997,"mtime":1608587344659,"results":"60","hashOfConfig":"37"},{"size":515,"mtime":1609632956526,"results":"61","hashOfConfig":"37"},{"size":6912,"mtime":1609632956542,"results":"62","hashOfConfig":"37"},{"size":1474,"mtime":1609632956526,"results":"63","hashOfConfig":"37"},{"size":9728,"mtime":1609632956526,"results":"64","hashOfConfig":"37"},{"size":10927,"mtime":1609632956526,"results":"65","hashOfConfig":"37"},{"size":1962,"mtime":1609643620170,"results":"66","hashOfConfig":"37"},{"size":63,"mtime":1609641590971,"results":"67","hashOfConfig":"37"},{"size":1202,"mtime":1609607855191,"results":"68","hashOfConfig":"37"},{"size":1584,"mtime":1609651956864,"results":"69","hashOfConfig":"37"},{"size":808,"mtime":1609632956542,"results":"70","hashOfConfig":"37"},{"size":212,"mtime":1609607855189,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1dydghi",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\index.js",[],["155","156"],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\reportWebVitals.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\App.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Login.js",["157","158"],"import React from \"react\";\r\nimport { useAuthContext } from \"../utils/AuthContext\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst Landing = () => {\r\n  const [authState, authDispatch] = useAuthContext();\r\n\r\n  return (\r\n    <div className='page-body-content' align=\"center\">\r\n      <Container>\r\n        {authState.username ? (\r\n          <div>Welcome back, {authState.username}</div>\r\n        ) : (\r\n          <LoginForm />\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Admin.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\GlobalState.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\UserAccount.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Landing.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\AuthContext.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Search.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Footer.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Favorites.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\ShoppingList.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\Recipe.js",["159","160","161"],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\pages\\NewRecipe.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Nav.js",["162"],"import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ListItemLink from \"../components/ListItemLink\";\r\nimport Logout from \"../components/Logout\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\n\r\nconst Nav = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  return (\r\n    <Grid\r\n      container\r\n      direction='row'\r\n      justify='flex-start'\r\n      alignItems='center'\r\n      p={5}>\r\n      <Grid item>\r\n        <ListItemLink to='/' primary='Home' />\r\n      </Grid>\r\n      <Grid item>\r\n        <ListItemLink to='/recipe/12' primary='Recipe' />\r\n      </Grid>\r\n      <Grid item>\r\n        <ListItemLink to='/search' primary='Search' />\r\n      </Grid>\r\n      {state.user ? (\r\n        <React.Fragment>\r\n          {state.user.admin ? (\r\n            <Grid item>\r\n            <ListItemLink to='/admin' primary='Admin' />\r\n          </Grid>\r\n          ) : (\r\n            <React.Fragment></React.Fragment>\r\n          )}\r\n          <Grid item>\r\n            <ListItemLink to='/favorites' primary='Favorites' />\r\n          </Grid>\r\n          <Grid item>\r\n            <ListItemLink to='/user-account' primary='User Account' />\r\n          </Grid>\r\n          <Grid item>\r\n            <Logout />\r\n          </Grid>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n\r\n        <Grid item>\r\n          <ListItemLink to='/login' primary='Login' />\r\n        </Grid>\r\n              <Grid item>\r\n              <ListItemLink to='/signup' primary='Signup' />\r\n            </Grid>\r\n        </React.Fragment>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\UserAccountForm.js",["163","164"],"import React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { SET_USER } from \"../utils/actions\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\n\r\nconst checkUniqueUsername = (username, setFieldError, setStatus) => {\r\n  // call API to check username return true or false\r\n  // helper func\r\n  if (username.length < 8) {\r\n    setFieldError(\"username\", \"Username must contain at least 8 characters\");\r\n    return false;\r\n  }\r\n\r\n  if (username === \"dansirdan\") {\r\n    setFieldError(\"username\", \"This username already exists.\");\r\n  } else {\r\n    setStatus({ username: \"Looks good!\" });\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  username: Yup.string()\r\n    .min(8, \"Username must contain at least 8 characters\")\r\n    .required(\"Enter a username\"),\r\n  email: Yup.string()\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  firstName: Yup.string().required(\"Required\"),\r\n  lastName: Yup.string().required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must contain at least 8 characters\")\r\n    .required(\"Enter your password\"),\r\n  confirmPassword: Yup.string()\r\n    .required(\"Confirm your password\")\r\n    .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\r\n});\r\n\r\nconst SignUpForm = props => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const history = useHistory();\r\n\r\n  const { username, email, firstName, lastName, password, editForm } = props;\r\n\r\n  const signUpSubmit = (\r\n    values,\r\n    { setSubmitting, resetForm, setFieldError, setStatus }\r\n  ) => {\r\n    // USERNAME IS UNIQUE, FINALIZE CALL TO API\r\n    AuthService.register(\r\n      values.username,\r\n      values.password,\r\n      values.email,\r\n      values.firstName,\r\n      values.lastName\r\n    )\r\n      .then((res) => {\r\n        if (res.status === 201) {\r\n          AuthService.setCurrentUser({\r\n            ...res.data,\r\n            accessToke: res.headers.token,\r\n          });\r\n          dispatch({\r\n            type: SET_USER,\r\n            user: res.data,\r\n          });\r\n          history.replace(\"/\");\r\n        } \r\n        // else if (res.status === 400) {\r\n        //   setFieldError(\"username\", \"This username or email already exists.\");\r\n        //   console.log(\"Possible duplicate email or username\");\r\n        //   setSubmitting(false);\r\n        // }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setFieldError(\"username\", \"This username or email already exists.\");\r\n        console.log(\"Possible duplicate email or username\");\r\n        setSubmitting(false);\r\n\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        <Formik\r\n          initialValues={{\r\n            username: username || \"\",\r\n            email: email || \"\",\r\n            firstName: firstName || \"\",\r\n            lastName: lastName || \"\",\r\n            password: password || \"\",\r\n            confirmPassword: \"\",\r\n          }}\r\n          initialTouched={{\r\n            username: false,\r\n            email: false,\r\n            firstName: false,\r\n            lastName: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n          }}\r\n          initialErrors={{\r\n            username: false,\r\n            email: false,\r\n            firstName: false,\r\n            lastName: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n          }}\r\n          initialStatus={{\r\n            username: false,\r\n            email: false,\r\n            firstName: false,\r\n            lastName: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={signUpSubmit}>\r\n          {({\r\n            values,\r\n            touched,\r\n            status,\r\n            errors,\r\n            handleChange,\r\n            handleBlur,\r\n            setFieldError,\r\n            setStatus,\r\n            isSubmitting,\r\n            isValid,\r\n            setFieldValue,\r\n          }) => (\r\n            <Form\r\n              noValidate\r\n              autoComplete='off'\r\n              style={{\r\n                maxWidth: 600,\r\n                margin: \"auto\",\r\n                marginTop: 30,\r\n                padding: 20,\r\n              }}>\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='center'\r\n                alignItems='center'>\r\n                <Grid item>\r\n                  <Typography variant='h2'>Create an Account</Typography>\r\n                  <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.username && Boolean(errors.username)}\r\n                    id='username'\r\n                    label='Username'\r\n                    value={values.username}\r\n                    placeholder='foodie77'\r\n                    helperText={\r\n                      touched.username && errors.username\r\n                        ? errors.username\r\n                        : status.username\r\n                        ? status.username\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                  <Grid container item justify='flex-end' alignItems='flex-end'>\r\n                    <Button\r\n                      onClick={() =>\r\n                        checkUniqueUsername(\r\n                          values.username,\r\n                          setFieldError,\r\n                          setStatus\r\n                        )\r\n                      }\r\n                      variant='outlined'\r\n                      color='default'\r\n                      endIcon={<Icon>check</Icon>}>\r\n                      Check\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.email && Boolean(errors.email)}\r\n                    id='email'\r\n                    label='Email'\r\n                    value={values.email}\r\n                    placeholder='diners.driveins@foodnetwork.net'\r\n                    helperText={\r\n                      touched.email && errors.email ? errors.email : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.firstName && Boolean(errors.firstName)}\r\n                    id='firstName'\r\n                    label='First Name'\r\n                    value={values.firstName}\r\n                    placeholder='Guy'\r\n                    helperText={\r\n                      touched.firstName && errors.firstName\r\n                        ? errors.firstName\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.lastName && Boolean(errors.lastName)}\r\n                    id='lastName'\r\n                    label='Last Name'\r\n                    value={values.lastName}\r\n                    placeholder='Fieri'\r\n                    helperText={\r\n                      touched.lastName && errors.lastName\r\n                        ? errors.lastName\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.password && Boolean(errors.password)}\r\n                    id='password'\r\n                    label='Password'\r\n                    value={values.password}\r\n                    type='password'\r\n                    placeholder=''\r\n                    helperText={\r\n                      touched.password && errors.password\r\n                        ? errors.password\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={\r\n                      touched.confirmPassword && Boolean(errors.confirmPassword)\r\n                    }\r\n                    id='confirmPassword'\r\n                    label='Confirm Password'\r\n                    value={values.confirmPassword}\r\n                    type='password'\r\n                    placeholder=''\r\n                    helperText={\r\n                      touched.confirmPassword && errors.confirmPassword\r\n                        ? errors.confirmPassword\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid container item justify='flex-end' alignItems='flex-end'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outlined'\r\n                    color='default'\r\n                    disabled={isSubmitting}\r\n                    endIcon={<Icon>send</Icon>}>\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\LoginForm.js",["165","166","167","168"],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\utils\\actions.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeGlanceFrame.js",["169","170","171"],"import RecipeGlanceCard from \"../components/RecipeGlanceCard\";\r\nimport React, {useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { SET_RECOMMENDED_RECIPES, LOADING } from \"../utils/actions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RecipeService from \"../services/recipe.service\";\r\n\r\nconst dummyRecipeArray = [{\r\n  id: 6,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n},\r\n{\r\n  id: 7,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n},\r\n{\r\n  id: 9,\r\n  imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\r\n  title: \"Pita\",\r\n  description: \"Round pita disks\",\r\n  publicRecipe: true,\r\n  ingredients: [\r\n      {\r\n          id: 16,\r\n          amount: {\r\n              id: 17,\r\n              amount: \"1 clove crushed\",\r\n              ingredient: {\r\n                  id: 1,\r\n                  ingredient: \"Garlic\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 15,\r\n          amount: {\r\n              id: 16,\r\n              amount: \"2 tbsp\",\r\n              ingredient: {\r\n                  id: 2,\r\n                  ingredient: \"Salt\"\r\n              }\r\n          }\r\n      },\r\n      {\r\n          id: 14,\r\n          amount: {\r\n              id: 15,\r\n              amount: \"4 cups\",\r\n              ingredient: {\r\n                  id: 3,\r\n                  ingredient: \"Flour\"\r\n              }\r\n          }\r\n      }\r\n  ],\r\n  instructions: [\r\n      {\r\n          id: 8,\r\n          step: {\r\n              id: 6,\r\n              step: \"knead until smooth\"\r\n          },\r\n          stepOrder: 1\r\n      },\r\n      {\r\n          id: 9,\r\n          step: {\r\n              id: 7,\r\n              step: \"let rest for 45-90 min\"\r\n          },\r\n          stepOrder: 2\r\n      },\r\n      {\r\n          id: 10,\r\n          step: {\r\n              id: 8,\r\n              step: \"punch down dough\"\r\n          },\r\n          stepOrder: 3\r\n      },\r\n      {\r\n          id: 11,\r\n          step: {\r\n              id: 9,\r\n              step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\r\n          },\r\n          stepOrder: 4\r\n      },\r\n      {\r\n          id: 12,\r\n          step: {\r\n              id: 10,\r\n              step: \"bake at 375 for 27-30 min\"\r\n          },\r\n          stepOrder: 5\r\n      }\r\n  ],\r\n  category: {\r\n      id: 1,\r\n      category: \"Bread\"\r\n  }\r\n}];\r\n\r\nconst RecipeGlanceFrame = () => {\r\n\r\n    \r\n  const [state, dispatch] = useStoreContext();\r\n\r\n//   const setRecommended = () => {\r\n//     dispatch({ type: LOADING, loading: true });\r\n//     setTimeout(function () {\r\n//       dispatch({\r\n//         type: SET_RECOMMENDED_RECIPES,\r\n//         recipes: dummyRecipeArray,\r\n//       });\r\n//     }, 1490);\r\n//   };\r\n\r\n  const setRecommended = () => {\r\n    RecipeService.getAllRecommendedRecipes()\r\n      .then(res => {\r\n        console.log(res.data);\r\n        res.status === 200 && dispatch({\r\n          type: SET_RECOMMENDED_RECIPES,\r\n          recipes: res.data\r\n        });\r\n        //console.log(RecipeService.getCurrentRecipe());\r\n      })\r\n      .catch(err => {\r\n          console.log(err);\r\n        });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    setRecommended();\r\n  }, []);\r\n\r\n    return (\r\n        <div>\r\n            {state.loading ? (\r\n                <Grid container item direction='row' justify='center'>\r\n                <Grid item>\r\n                    <CircularProgress color='secondary' />\r\n                </Grid>\r\n                </Grid>\r\n            ) : (\r\n            <Grid\r\n            container\r\n            direction='row'\r\n            justify='flex-start'\r\n            alignItems='center'\r\n            p={5}>{\r\n                state.recommendedRecipes.length > 0 ? state.recommendedRecipes.map(recipeObj => (\r\n                    <Grid item key={recipeObj.id}>\r\n                        <RecipeGlanceCard recipeDetail={recipeObj}/>\r\n                    </Grid>\r\n                )) : (\r\n                    <div>\r\n                        No Recipes Found.\r\n                    </div>\r\n                )\r\n            }\r\n            </Grid>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeGlanceFrame;","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\FavoritesTable.js",["172"],"import React, { useEffect } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TrashIcon from \"@material-ui/icons/Delete\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { SET_FAVORITES, LOADING } from \"../utils/actions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\nconst FavoritesTable = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const favoriteRecipes = [\r\n    {\r\n      id: 0,\r\n      img: \"https://via.placeholder.com/100\",\r\n      title: \"test\",\r\n      category: \"soup\",\r\n      public: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      img: \"https://via.placeholder.com/100\",\r\n      title: \"test\",\r\n      category: \"pasta\",\r\n      public: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      img: \"https://via.placeholder.com/100\",\r\n      title: \"test\",\r\n      category: \"dessert\",\r\n      public: true,\r\n    },\r\n  ];\r\n\r\n  //\r\n  const setFavorites = () => {\r\n    dispatch({ type: LOADING, loading: true });\r\n    setTimeout(function () {\r\n      dispatch({\r\n        type: SET_FAVORITES,\r\n        favorites: favoriteRecipes,\r\n      });\r\n    }, 1500);\r\n  };\r\n\r\n  // WILL BE AN API CALL\r\n  const removeFavorite = id => {\r\n    const shorterFavs = state.favorites.filter(fav => fav.id !== id);\r\n    dispatch({\r\n      type: SET_FAVORITES,\r\n      favorites: shorterFavs,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFavorites();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {state.loading ? (\r\n        <Grid container item direction='row' justify='center'>\r\n          <Grid item>\r\n            <CircularProgress color='secondary' />\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid container item direction='row' justify='center'>\r\n          {state.favorites.length > 0 ? (\r\n            <Grid item xs={12}>\r\n              <Fade in={!state.loading}>\r\n                <TableContainer component={Paper}>\r\n                  <Table aria-label='simple table'>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Image</TableCell>\r\n                        <TableCell>Title</TableCell>\r\n                        <TableCell>Category</TableCell>\r\n                        <TableCell>Public/Private</TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {state.favorites.map(recipe => (\r\n                        <TableRow key={recipe.id}>\r\n                          <TableCell component='th' scope='row'>\r\n                            <Tooltip title='View Recipe'>\r\n                              <Link to={`/recipe/${recipe.id}`}>\r\n                                <img src={recipe.img} alt='placeholder' />\r\n                              </Link>\r\n                            </Tooltip>\r\n                          </TableCell>\r\n                          <TableCell>{recipe.title}</TableCell>\r\n                          <TableCell>{recipe.category}</TableCell>\r\n                          <TableCell>\r\n                            {recipe.public ? \"public\" : \"private\"}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Tooltip title='Remove from Favorites'>\r\n                              <IconButton\r\n                                onClick={() => removeFavorite(recipe.id)}>\r\n                                <TrashIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Fade>\r\n            </Grid>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Grid item>\r\n                <Typography variant='subtitle1'>\r\n                  no favorite recipes found\r\n                </Typography>\r\n                {/* TO BE DELETED */}\r\n                <button onClick={() => setFavorites()}>\r\n                  POPULATE DUMMY DATA\r\n                </button>\r\n              </Grid>\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FavoritesTable;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\IngredientsList.js",["173"],"import React, { useEffect } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteButton from \"@material-ui/icons/Delete\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { SET_SHOPPING_LIST, LOADING } from \"../utils/actions\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport default function CheckboxList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const dummyShoppingListData = [\r\n    {\r\n      id: 0,\r\n      ingredientName: \"Garlic\",\r\n      checked: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      ingredientName: \"Parmesan\",\r\n      checked: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      ingredientName: \"Salt\",\r\n      checked: false,\r\n    },\r\n  ];\r\n\r\n  const setShoppingList = () => {\r\n    dispatch({ type: LOADING, loading: true });\r\n    setTimeout(function () {\r\n      dispatch({\r\n        type: SET_SHOPPING_LIST,\r\n        shoppingList: dummyShoppingListData,\r\n      });\r\n    }, 1500);\r\n  };\r\n\r\n  // WILL BE AN API CALL\r\n  const removeFromList = id => {\r\n    const shorterList = state.shoppingList.filter(item => item.id !== id);\r\n    dispatch({\r\n      type: SET_SHOPPING_LIST,\r\n      shoppingList: shorterList,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShoppingList();\r\n  }, []);\r\n\r\n  const handleToggle = value => () => {\r\n    value.checked = !value.checked;\r\n    const updateShoppingList = state.shoppingList.map(item =>\r\n      item.id === value.id ? value : item\r\n    );\r\n\r\n    dispatch({\r\n      type: SET_SHOPPING_LIST,\r\n      shoppingList: updateShoppingList,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {state.loading ? (\r\n        <Grid container item direction='row' justify='center'>\r\n          <Grid item>\r\n            <CircularProgress color='secondary' />\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid container item direction='row' justify='center'>\r\n          {state.shoppingList.length > 0 ? (\r\n            <Grid item xs={12}>\r\n              <Fade in={!state.loading}>\r\n                <List>\r\n                  {state.shoppingList.map((value, index) => (\r\n                    <ListItem\r\n                      key={value.id}\r\n                      role={undefined}\r\n                      dense\r\n                      button\r\n                      onClick={handleToggle(value)}>\r\n                      <ListItemIcon>\r\n                        <Checkbox\r\n                          edge='start'\r\n                          checked={value.checked}\r\n                          tabIndex={-1}\r\n                          disableRipple\r\n                          inputProps={{\r\n                            \"aria-labelledby\": `checkbox-list-label-${value.id}`,\r\n                          }}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        id={`checkbox-list-label-${value.id}`}\r\n                        primary={`${value.ingredientName}`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Tooltip title='Delete from list'>\r\n                          <IconButton\r\n                            edge='end'\r\n                            aria-label='comments'\r\n                            onClick={() => removeFromList(value.id)}>\r\n                            <DeleteButton />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Fade>\r\n            </Grid>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Grid item>\r\n                <Typography variant='subtitle1'>\r\n                  No items found in your shopping list\r\n                </Typography>\r\n                {/* TO BE DELETED */}\r\n                <button onClick={() => setShoppingList()}>\r\n                  POPULATE DUMMY DATA\r\n                </button>\r\n              </Grid>\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\auth.service.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\ListItemLink.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\Logout.js",["174"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { UNSET_USER } from \"../utils/actions\";\r\n\r\nconst Logout = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const handleLogout = () => {\r\n    AuthService.logout();\r\n    dispatch({\r\n      type: UNSET_USER,\r\n    });\r\n  };\r\n\r\n  return <Button onClick={handleLogout}>Logout</Button>;\r\n};\r\n\r\nexport default Logout;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js",["175","176","177","178"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport RecipeService from \"../../services/recipe.service\";\r\n\r\nconst FinalSubmitRecipeForm = () => {\r\n  const debug = true;\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    RecipeService.postRecipe({\r\n      imageLocation: state.recipeDetail.imageLocation,\r\n      title: state.recipeDetail.title,\r\n      description: state.recipeDetail.description,\r\n      publicRecipe: state.recipeDetail.publicRecipe,\r\n      ingredients: state.ingredients,\r\n      instructions: state.instructions,\r\n      category: {id: state.recipeDetail.category},\r\n    })\r\n      .then(res => {\r\n        console.log(res.status);\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n  return (\r\n    <Paper>\r\n      <form\r\n        noValidate\r\n        autoComplete='off'\r\n        style={{\r\n          maxWidth: 600,\r\n          margin: \"auto\",\r\n          marginTop: 30,\r\n          padding: 20,\r\n        }}>\r\n        How's it look?\r\n        <Button onClick={handleSubmit} endIcon={<SendIcon />}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default FinalSubmitRecipeForm;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",["179","180"],"import React, { useEffect, useState } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { SET_RECIPE_DETAIL } from \"../../utils/actions\";\r\nimport CategoryService from \"../../services/category.service\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(5, \"Title must contain at least 5 characters\")\r\n    .required(\"Enter a recipe title\"),\r\n  imageLocation: Yup.string(),\r\n  description: Yup.string().required(\"Required\"),\r\n  isPublic: Yup.boolean(),\r\n  category: Yup.string().required(\"Select a recipe category\"),\r\n  categoryId: Yup.number()\r\n});\r\n\r\nconst RecipeForm = props => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [recipeCategory, setRecipeCategory] = useState([]);\r\n\r\n  const debug = true;\r\n  const {\r\n    editForm,\r\n    title,\r\n    imageLocation,\r\n    description,\r\n    isPublic,\r\n    category,\r\n    categoryId\r\n  } = props;\r\n\r\n  const recipeSubmit = (values, { setSubmitting }) => {\r\n    dispatch({\r\n      type: SET_RECIPE_DETAIL,\r\n      recipeDetail: values,\r\n    });\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const capitalize = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1)\r\n  }\r\n\r\n  const getCategories = () => {\r\n    CategoryService.getAllCategories().then(res => {\r\n      console.log(res);\r\n      if (res.data.length > 0){\r\n        let categoryArr = res.data.map((categoryObj) => {\r\n          return {\r\n            value: categoryObj.category,\r\n            label: capitalize(categoryObj.category),\r\n            id: categoryObj.id\r\n          }\r\n        })\r\n        setRecipeCategory(categoryArr)\r\n      }\r\n    }).catch(err => console.log(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        <Formik\r\n          initialValues={{\r\n            title: title || \"\",\r\n            imageLocation: imageLocation || \"\",\r\n            description: description || \"\",\r\n            isPublic: isPublic || false,\r\n            category: category || \"\",\r\n          }}\r\n          initialTouched={{\r\n            title: false,\r\n            imageLocation: false,\r\n            description: false,\r\n            isPublic: false,\r\n            category: false,\r\n          }}\r\n          initialErrors={{\r\n            title: false,\r\n            imageLocation: false,\r\n            description: false,\r\n            isPublic: false,\r\n            category: false,\r\n          }}\r\n          initialStatus={{\r\n            title: false,\r\n            imageLocation: false,\r\n            description: false,\r\n            isPublic: false,\r\n            category: false,\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={recipeSubmit}>\r\n          {({\r\n            values,\r\n            touched,\r\n            errors,\r\n            handleChange,\r\n            handleBlur,\r\n            isSubmitting,\r\n          }) => (\r\n            <Form\r\n              noValidate\r\n              autoComplete='off'\r\n              style={{\r\n                maxWidth: 600,\r\n                margin: \"auto\",\r\n                marginTop: 30,\r\n                padding: 20,\r\n              }}>\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='center'\r\n                alignItems='center'>\r\n                <Grid item>\r\n                  <Typography variant='h2'>\r\n                    {editForm ? \"Edit Recipe\" : \"Create Recipe\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.title && Boolean(errors.title)}\r\n                    id='title'\r\n                    label='Title'\r\n                    value={values.title}\r\n                    placeholder='Brown Butter Chicken'\r\n                    helperText={\r\n                      touched.title && errors.title ? errors.title : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    select\r\n                    id='category'\r\n                    name='category'\r\n                    label='Select a Category'\r\n                    margin='dense'\r\n                    variant='outlined'\r\n                    error={touched.category && Boolean(errors.category)}\r\n                    onChange={handleChange}\r\n                    value={values.category}\r\n                    helperText={\r\n                      touched.category && errors.category\r\n                        ? errors.category\r\n                        : \" \"\r\n                    }\r\n                    fullWidth>\r\n                    {recipeCategory.map(option => (\r\n                      <MenuItem key={option.value} value={option.id}>\r\n                        {option.label}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={\r\n                      touched.imageLocation && Boolean(errors.imageLocation)\r\n                    }\r\n                    id='imageLocation'\r\n                    label='Image URL'\r\n                    value={values.imageLocation}\r\n                    helperText={\r\n                      touched.imageLocation && errors.imageLocation\r\n                        ? errors.imageLocation\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin='dense'\r\n                    size='small'\r\n                    error={touched.description && Boolean(errors.description)}\r\n                    id='description'\r\n                    label='Description'\r\n                    multiline\r\n                    rows={4}\r\n                    placeholder='A delicious and savory take on the classic...'\r\n                    value={values.description}\r\n                    helperText={\r\n                      touched.description && errors.description\r\n                        ? errors.description\r\n                        : \" \"\r\n                    }\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={values.isPublic}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        name='isPublic'\r\n                        inputProps={{ \"aria-label\": \"make public or private\" }}\r\n                      />\r\n                    }\r\n                    label={\r\n                      values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\r\n                </Grid>\r\n                <Grid container item justify='flex-end' alignItems='flex-end'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outlined'\r\n                    disabled={isSubmitting}\r\n                    endIcon={<NavigateNextIcon />}>\r\n                    Next\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              {debug && (\r\n                <>\r\n                  <pre style={{ textAlign: \"left\" }}>\r\n                    <strong>Values</strong>\r\n                    <br />\r\n                    {JSON.stringify(state.recipeDetail, null, 2)}\r\n                  </pre>\r\n                  <pre style={{ textAlign: \"left\" }}>\r\n                    <strong>Errors</strong>\r\n                    <br />\r\n                    {JSON.stringify(errors, null, 2)}\r\n                  </pre>\r\n                </>\r\n              )}\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeForm;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",["181"],"import React, { useEffect, useState } from \"react\";\r\nimport { Divider, Button, TextField } from \"@material-ui/core\";\r\nimport { FieldArray, Form, Formik, getIn } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { SET_INGREDIENTS } from \"../../utils/actions\";\r\nimport IngredientService from \"../../services/ingredient.service\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  ingredients: Yup.array().of(\r\n    Yup.object()\r\n      .shape({\r\n        ingredientName: Yup.string().required(\"Ingredient is required\"),\r\n        ingredientAmount: Yup.string().required(\"Amount is required\"),\r\n        ingredientId: Yup.number()\r\n      })\r\n      .test(\r\n        \"unique\",\r\n        \"Duplicate ingredient in list\",\r\n        function validateUnique(currentIngredient) {\r\n          const otherIngredients = this.parent.filter(\r\n            ingredient => ingredient !== currentIngredient\r\n          );\r\n          const isDuplicate = otherIngredients.some(\r\n            ingredient =>\r\n              ingredient.ingredientName === currentIngredient.ingredientName\r\n          );\r\n          return isDuplicate\r\n            ? this.createError({ path: `${this.path}.ingredientName` })\r\n            : true;\r\n        }\r\n      )\r\n  ),\r\n});\r\n\r\nconst debug = true;\r\n\r\nconst RecipeIngredients = ({ editForm }) => {\r\n\r\n  const [state, dispatch] = useStoreContext();\r\n  const [ingredientsAPI, setIngredientsAPI] = useState([\r\n    { id: 0, ingredientName: \"\" },\r\n  ]);\r\n\r\n  const ingredientSubmit = values => {\r\n\r\n    const parsedIngredients = values.ingredients.map(ingredient => {\r\n      return {\r\n        amount: {\r\n          amount: ingredient.ingredientAmount,\r\n          ingredient: {\r\n            id: ingredient.ingredientId\r\n          }\r\n        }\r\n      }\r\n    })\r\n    console.log(parsedIngredients)\r\n    dispatch({\r\n      type: SET_INGREDIENTS,\r\n      ingredients: parsedIngredients\r\n    })\r\n  };\r\n\r\n  const getIngredients = () => {\r\n    IngredientService.getAllIngredients()\r\n      .then(res => {\r\n        if (res.data.length > 0) {\r\n          const parsedIngredients = res.data.map(ingredientObj => {\r\n            return {\r\n              id: ingredientObj.id,\r\n              ingredientName: ingredientObj.ingredient,\r\n            };\r\n          });\r\n          setIngredientsAPI([...ingredientsAPI, ...parsedIngredients]);\r\n        }\r\n      })\r\n      .then(err => console.log(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getIngredients();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='page-body-content'>\r\n      <Paper>\r\n        <Formik\r\n          initialValues={{\r\n            ingredients: [\r\n              {\r\n                ingredientName: \"\",\r\n                ingredientAmount: \"\",\r\n                ingredientId: 0\r\n              },\r\n            ],\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={ingredientSubmit}>\r\n          {({\r\n            values,\r\n            touched,\r\n            errors,\r\n            handleChange,\r\n            handleBlur,\r\n            isValid,\r\n            setFieldValue,\r\n          }) => (\r\n            <Form\r\n              noValidate\r\n              autoComplete='off'\r\n              style={{\r\n                maxWidth: 600,\r\n                margin: \"auto\",\r\n                marginTop: 30,\r\n                padding: 20,\r\n              }}>\r\n              <FieldArray name='ingredients'>\r\n                {({ push, remove }) => (\r\n                  <Grid\r\n                    container\r\n                    direction='row'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                    margin={4}>\r\n                    <Grid item>\r\n                      <Typography variant='h2'>\r\n                        {editForm ? \"Edit \" : \"Add \"}Ingredients\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Divider style={{ marginTop: 10, marginBottom: 20 }} />\r\n                    </Grid>\r\n                    {values.ingredients.map((p, index) => {\r\n                      const ingredientName = `ingredients[${index}].ingredientName`;\r\n                      const touchedName = getIn(touched, ingredientName);\r\n                      const errorName = getIn(errors, ingredientName);\r\n\r\n                      const ingredientAmount = `ingredients[${index}].ingredientAmount`;\r\n                      const touchedAmount = getIn(touched, ingredientAmount);\r\n                      const errorAmount = getIn(errors, ingredientAmount);\r\n\r\n                      const ingredientId = `ingredients[${index}].ingredientId`;\r\n\r\n                      return (\r\n                        <Grid\r\n                          container\r\n                          direction='row'\r\n                          justify='center'\r\n                          alignItems='center'\r\n                          spacing={2}\r\n                          item\r\n                          xs={12}\r\n                          key={`key-${p}-${index}`}>\r\n                          <Grid item sm={6} xs={12}>\r\n                            <Autocomplete\r\n                              name={ingredientName}\r\n                              value={p.ingredientName}\r\n                              options={ingredientsAPI}\r\n                              getOptionSelected={(option, value) =>\r\n                                option.ingredientName === value\r\n                              }\r\n                              onOpen={handleBlur}\r\n                              getOptionLabel={option => {\r\n                                if (typeof option === \"string\") {\r\n                                  return option;\r\n                                }\r\n                                if (option.ingredientName) {\r\n                                  return option.ingredientName;\r\n                                }\r\n                                return option.ingredientName;\r\n                              }}\r\n                              onChange={(event, newValue) => {\r\n                                setFieldValue(\r\n                                  ingredientName,\r\n                                  newValue !== null\r\n                                    ? newValue.ingredientName\r\n                                    : \"\"\r\n                                );\r\n                                setFieldValue(ingredientId, newValue !== null ? newValue.id : 0)\r\n                              }}\r\n                              renderInput={params => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  margin='dense'\r\n                                  label='Ingredient Name'\r\n                                  size='small'\r\n                                  error={Boolean(touchedName && errorName)}\r\n                                  helperText={\r\n                                    touchedName && errorName ? errorName : \" \"\r\n                                  }\r\n                                  fullWidth\r\n                                  variant='outlined'\r\n                                />\r\n                              )}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item sm={1} />\r\n                          <Grid item sm={4} xs={12}>\r\n                            <TextField\r\n                              fullWidth\r\n                              margin='dense'\r\n                              variant='outlined'\r\n                              label='Amount'\r\n                              name={ingredientAmount}\r\n                              value={p.ingredientAmount}\r\n                              required\r\n                              helperText={\r\n                                touchedAmount && errorAmount ? errorAmount : \" \"\r\n                              }\r\n                              error={Boolean(touchedAmount && errorAmount)}\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={1}>\r\n                            <IconButton\r\n                              aria-label='delete'\r\n                              disabled={index === 0}\r\n                              onClick={() => remove(index)}>\r\n                              <ClearIcon />\r\n                            </IconButton>\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                    <Grid\r\n                      container\r\n                      direction='row'\r\n                      item\r\n                      justify='flex-end'\r\n                      alignItems='flex-end'>\r\n                      <Button\r\n                        type='button'\r\n                        variant='outlined'\r\n                        onClick={() =>\r\n                          push({\r\n                            id: Math.random(),\r\n                            ingredientName: \"\",\r\n                            ingredientAmount: \"\",\r\n                          })\r\n                        }>\r\n                        Add\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                )}\r\n              </FieldArray>\r\n              <Divider style={{ marginTop: 20, marginBottom: 20 }} />\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='flex-end'\r\n                alignItems='flex-end'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outlined'\r\n                  // disabled={!isValid || values.ingredients.length === 0}\r\n                  endIcon={<NavigateNextIcon />}>\r\n                  next\r\n                </Button>\r\n              </Grid>\r\n              {debug && (\r\n                <>\r\n                  <pre style={{ textAlign: \"left\" }}>\r\n                    <strong>State Ingredients</strong>\r\n                    <br />\r\n                    {JSON.stringify(state.ingredients, null, 2)}\r\n                  </pre>\r\n                  <pre style={{ textAlign: \"left\" }}>\r\n                    <strong>Errors</strong>\r\n                    <br />\r\n                    {JSON.stringify(errors, null, 2)}\r\n                  </pre>\r\n                </>\r\n              )}\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeIngredients;\r\n","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\components\\RecipeGlanceCard.js",["182","183"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n  },\r\n}));\r\n\r\nexport default function RecipeGlanceCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            {props.recipeDetail.category.category[0]}{props.recipeDetail.category.category[1]}{props.recipeDetail.category.category[2]}\r\n          </Avatar>\r\n        }\r\n        title={props.recipeDetail.title}\r\n        subheader={props.recipeDetail.category.category}\r\n      />\r\n      <Link to={`/recipe/${props.recipeDetail.id}`}>\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={\"http://images.generictech.org/\" + props.recipeDetail.imageLocation}\r\n        title={props.recipeDetail.title}\r\n      />\r\n      </Link>\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.recipeDetail.description}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\api-url.js",["184"],"export default \"http://api.generictech.org:8080/cuttingboard/\";","C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\ingredient.service.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\recipe.service.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\category.service.js",[],"C:\\Revature\\Project2 - CuttingBoard\\CuttingBoard-frontend\\src\\services\\auth-header.js",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":17},{"ruleId":"189","severity":1,"message":"193","line":7,"column":21,"nodeType":"191","messageId":"192","endLine":7,"endColumn":33},{"ruleId":"189","severity":1,"message":"194","line":7,"column":8,"nodeType":"191","messageId":"192","endLine":7,"endColumn":12},{"ruleId":"195","severity":1,"message":"196","line":163,"column":6,"nodeType":"197","endLine":163,"endColumn":8,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":176,"column":16,"nodeType":"201","endLine":176,"endColumn":123},{"ruleId":"189","severity":1,"message":"202","line":8,"column":17,"nodeType":"191","messageId":"192","endLine":8,"endColumn":25},{"ruleId":"189","severity":1,"message":"203","line":51,"column":10,"nodeType":"191","messageId":"192","endLine":51,"endColumn":15},{"ruleId":"189","severity":1,"message":"204","line":54,"column":59,"nodeType":"191","messageId":"192","endLine":54,"endColumn":67},{"ruleId":"189","severity":1,"message":"190","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":17},{"ruleId":"189","severity":1,"message":"203","line":13,"column":10,"nodeType":"191","messageId":"192","endLine":13,"endColumn":15},{"ruleId":"189","severity":1,"message":"205","line":46,"column":11,"nodeType":"191","messageId":"192","endLine":46,"endColumn":27},{"ruleId":"206","severity":1,"message":"207","line":54,"column":28,"nodeType":"208","messageId":"209","endLine":54,"endColumn":30},{"ruleId":"189","severity":1,"message":"210","line":5,"column":35,"nodeType":"191","messageId":"192","endLine":5,"endColumn":42},{"ruleId":"189","severity":1,"message":"211","line":9,"column":7,"nodeType":"191","messageId":"192","endLine":9,"endColumn":23},{"ruleId":"195","severity":1,"message":"212","line":307,"column":6,"nodeType":"197","endLine":307,"endColumn":8,"suggestions":"213"},{"ruleId":"195","severity":1,"message":"214","line":69,"column":6,"nodeType":"197","endLine":69,"endColumn":8,"suggestions":"215"},{"ruleId":"195","severity":1,"message":"216","line":60,"column":6,"nodeType":"197","endLine":60,"endColumn":8,"suggestions":"217"},{"ruleId":"189","severity":1,"message":"203","line":8,"column":10,"nodeType":"191","messageId":"192","endLine":8,"endColumn":15},{"ruleId":"189","severity":1,"message":"218","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":18},{"ruleId":"189","severity":1,"message":"219","line":6,"column":8,"nodeType":"191","messageId":"192","endLine":6,"endColumn":12},{"ruleId":"189","severity":1,"message":"220","line":11,"column":9,"nodeType":"191","messageId":"192","endLine":11,"endColumn":14},{"ruleId":"189","severity":1,"message":"202","line":12,"column":17,"nodeType":"191","messageId":"192","endLine":12,"endColumn":25},{"ruleId":"189","severity":1,"message":"221","line":41,"column":5,"nodeType":"191","messageId":"192","endLine":41,"endColumn":15},{"ruleId":"195","severity":1,"message":"222","line":75,"column":6,"nodeType":"197","endLine":75,"endColumn":8,"suggestions":"223"},{"ruleId":"195","severity":1,"message":"224","line":89,"column":6,"nodeType":"197","endLine":89,"endColumn":8,"suggestions":"225"},{"ruleId":"189","severity":1,"message":"226","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"227","line":1,"column":28,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"228","severity":1,"message":"229","line":1,"column":1,"nodeType":"230","endLine":1,"endColumn":64},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'authDispatch' is assigned a value but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleLoadRecipe', 'props.match.params.id', and 'setFavorites'. Either include them or remove the dependency array.","ArrayExpression",["233"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dispatch' is assigned a value but never used.","'state' is assigned a value but never used.","'editForm' is assigned a value but never used.","'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'LOADING' is defined but never used.","'dummyRecipeArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRecommended'. Either include it or remove the dependency array.",["234"],"React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.",["235"],"React Hook useEffect has a missing dependency: 'setShoppingList'. Either include it or remove the dependency array.",["236"],"'Typography' is defined but never used.","'Grid' is defined but never used.","'debug' is assigned a value but never used.","'categoryId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["237"],"React Hook useEffect has a missing dependency: 'getIngredients'. Either include it or remove the dependency array.",["238"],"'useEffect' is defined but never used.","'useState' is defined but never used.","import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},"Update the dependencies array to be: [handleLoadRecipe, props.match.params.id, setFavorites]",{"range":"251","text":"252"},"Update the dependencies array to be: [setRecommended]",{"range":"253","text":"254"},"Update the dependencies array to be: [setFavorites]",{"range":"255","text":"256"},"Update the dependencies array to be: [setShoppingList]",{"range":"257","text":"258"},"Update the dependencies array to be: [getCategories]",{"range":"259","text":"260"},"Update the dependencies array to be: [getIngredients]",{"range":"261","text":"262"},[4657,4659],"[handleLoadRecipe, props.match.params.id, setFavorites]",[7029,7031],"[setRecommended]",[2006,2008],"[setFavorites]",[1809,1811],"[setShoppingList]",[2346,2348],"[getCategories]",[2864,2866],"[getIngredients]"]