[{"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js":"1","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js":"2","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js":"3","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js":"4","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js":"5","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js":"6","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js":"7","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js":"8","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js":"9","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js":"10","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js":"11","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js":"12","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js":"13","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js":"14","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js":"15","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js":"16","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js":"17","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js":"18","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js":"19","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js":"20","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"21","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"22","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"23","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js":"24","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js":"25","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js":"26","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js":"27","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js":"28","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js":"29","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js":"30","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js":"31","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js":"32","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js":"33","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js":"34","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js":"35","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\shoppinglist.service.js":"36","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js":"37","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js":"38","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AuthMenu.js":"39","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutModal.js":"40","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutForm.js":"41","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\SideNav.js":"42"},{"size":457,"mtime":1608587344002,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"44"},{"size":2196,"mtime":1609715153390,"results":"46","hashOfConfig":"44"},{"size":11335,"mtime":1609713649058,"results":"47","hashOfConfig":"44"},{"size":2822,"mtime":1609713649074,"results":"48","hashOfConfig":"44"},{"size":1560,"mtime":1609716534534,"results":"49","hashOfConfig":"44"},{"size":322,"mtime":1608587343997,"results":"50","hashOfConfig":"44"},{"size":1166,"mtime":1609713649061,"results":"51","hashOfConfig":"44"},{"size":182,"mtime":1609192482180,"results":"52","hashOfConfig":"44"},{"size":996,"mtime":1609432864461,"results":"53","hashOfConfig":"44"},{"size":1048,"mtime":1609364795628,"results":"54","hashOfConfig":"44"},{"size":1547,"mtime":1609608204137,"results":"55","hashOfConfig":"44"},{"size":164,"mtime":1609708418203,"results":"56","hashOfConfig":"44"},{"size":8238,"mtime":1609713649065,"results":"57","hashOfConfig":"44"},{"size":511,"mtime":1609708418204,"results":"58","hashOfConfig":"44"},{"size":4746,"mtime":1609708418204,"results":"59","hashOfConfig":"44"},{"size":971,"mtime":1609371884221,"results":"60","hashOfConfig":"44"},{"size":821,"mtime":1609713649076,"results":"61","hashOfConfig":"44"},{"size":495,"mtime":1609630075412,"results":"62","hashOfConfig":"44"},{"size":649,"mtime":1609608204142,"results":"63","hashOfConfig":"44"},{"size":9074,"mtime":1609713649044,"results":"64","hashOfConfig":"44"},{"size":6381,"mtime":1609713649055,"results":"65","hashOfConfig":"44"},{"size":10432,"mtime":1609713649051,"results":"66","hashOfConfig":"44"},{"size":3233,"mtime":1609713649048,"results":"67","hashOfConfig":"44"},{"size":963,"mtime":1608587343999,"results":"68","hashOfConfig":"44"},{"size":5387,"mtime":1609708418202,"results":"69","hashOfConfig":"44"},{"size":773,"mtime":1609630075431,"results":"70","hashOfConfig":"44"},{"size":7383,"mtime":1609708418203,"results":"71","hashOfConfig":"44"},{"size":1664,"mtime":1609713649071,"results":"72","hashOfConfig":"44"},{"size":2511,"mtime":1609715815365,"results":"73","hashOfConfig":"44"},{"size":1959,"mtime":1609708418203,"results":"74","hashOfConfig":"44"},{"size":6628,"mtime":1609708418202,"results":"75","hashOfConfig":"44"},{"size":1156,"mtime":1609713649069,"results":"76","hashOfConfig":"44"},{"size":64,"mtime":1609708418205,"results":"77","hashOfConfig":"44"},{"size":203,"mtime":1609608204140,"results":"78","hashOfConfig":"44"},{"size":954,"mtime":1609708418205,"results":"79","hashOfConfig":"44"},{"size":443,"mtime":1609713649040,"results":"80","hashOfConfig":"44"},{"size":4901,"mtime":1609713649042,"results":"81","hashOfConfig":"44"},{"size":2520,"mtime":1609714964310,"results":"82","hashOfConfig":"44"},{"size":2093,"mtime":1609715614401,"results":"83","hashOfConfig":"44"},{"size":2029,"mtime":1609715734349,"results":"84","hashOfConfig":"44"},{"size":1818,"mtime":1609716313404,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u01klj",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"95"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"95"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"95"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js",["176","177"],"import React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { SET_USER } from \"../utils/actions\";\nimport AuthService from \"../services/auth.service\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStoreContext } from \"../utils/GlobalState\";\n\nconst checkUniqueUsername = (username, setFieldError, setStatus) => {\n  // call API to check username return true or false\n  // helper func\n  if (username.length < 8) {\n    setFieldError(\"username\", \"Username must contain at least 8 characters\");\n    return false;\n  }\n\n  if (username === \"dansirdan\") {\n    setFieldError(\"username\", \"This username already exists.\");\n  } else {\n    setStatus({ username: \"Looks good!\" });\n    return true;\n  }\n  return false;\n};\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(8, \"Username must contain at least 8 characters\")\n    .required(\"Enter a username\"),\n  email: Yup.string()\n    .email(\"Enter a valid email\")\n    .required(\"Email is required\"),\n  firstName: Yup.string().required(\"Required\"),\n  lastName: Yup.string().required(\"Required\"),\n  password: Yup.string()\n    .min(8, \"Password must contain at least 8 characters\")\n    .required(\"Enter your password\"),\n  confirmPassword: Yup.string()\n    .required(\"Confirm your password\")\n    .oneOf([Yup.ref(\"password\")], \"Password does not match\"),\n});\n\nconst SignUpForm = props => {\n  const [state, dispatch] = useStoreContext();\n  const history = useHistory();\n\n  const { username, email, firstName, lastName, password, editForm } = props;\n\n  const signUpSubmit = (\n    values,\n    { setSubmitting, resetForm, setFieldError, setStatus }\n  ) => {\n    // USERNAME IS UNIQUE, FINALIZE CALL TO API\n    AuthService.register(\n      values.username,\n      values.password,\n      values.email,\n      values.firstName,\n      values.lastName\n    )\n      .then((res) => {\n        if (res.status === 201) {\n          AuthService.setCurrentUser({\n            ...res.data,\n            accessToke: res.headers.token,\n          });\n          dispatch({\n            type: SET_USER,\n            user: res.data,\n          });\n          history.replace(\"/\");\n        } \n        // else if (res.status === 400) {\n        //   setFieldError(\"username\", \"This username or email already exists.\");\n        //   console.log(\"Possible duplicate email or username\");\n        //   setSubmitting(false);\n        // }\n      })\n      .catch((err) => {\n        console.log(err);\n        setFieldError(\"username\", \"This username or email already exists.\");\n        console.log(\"Possible duplicate email or username\");\n        setSubmitting(false);\n\n      });\n  };\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <Formik\n          initialValues={{\n            username: username || \"\",\n            email: email || \"\",\n            firstName: firstName || \"\",\n            lastName: lastName || \"\",\n            password: password || \"\",\n            confirmPassword: \"\",\n          }}\n          initialTouched={{\n            username: false,\n            email: false,\n            firstName: false,\n            lastName: false,\n            password: false,\n            confirmPassword: false,\n          }}\n          initialErrors={{\n            username: false,\n            email: false,\n            firstName: false,\n            lastName: false,\n            password: false,\n            confirmPassword: false,\n          }}\n          initialStatus={{\n            username: false,\n            email: false,\n            firstName: false,\n            lastName: false,\n            password: false,\n            confirmPassword: false,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={signUpSubmit}>\n          {({\n            values,\n            touched,\n            status,\n            errors,\n            handleChange,\n            handleBlur,\n            setFieldError,\n            setStatus,\n            isSubmitting,\n            isValid,\n            setFieldValue,\n          }) => (\n            <Form\n              noValidate\n              autoComplete='off'\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h2'>Create an Account</Typography>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.username && Boolean(errors.username)}\n                    id='username'\n                    label='Username'\n                    value={values.username}\n                    placeholder='foodie77'\n                    helperText={\n                      touched.username && errors.username\n                        ? errors.username\n                        : status.username\n                        ? status.username\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                  <Grid container item justify='flex-end' alignItems='flex-end'>\n                    <Button\n                      onClick={() =>\n                        checkUniqueUsername(\n                          values.username,\n                          setFieldError,\n                          setStatus\n                        )\n                      }\n                      variant='outlined'\n                      color='default'\n                      endIcon={<Icon>check</Icon>}>\n                      Check\n                    </Button>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.email && Boolean(errors.email)}\n                    id='email'\n                    label='Email'\n                    value={values.email}\n                    placeholder='diners.driveins@foodnetwork.net'\n                    helperText={\n                      touched.email && errors.email ? errors.email : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.firstName && Boolean(errors.firstName)}\n                    id='firstName'\n                    label='First Name'\n                    value={values.firstName}\n                    placeholder='Guy'\n                    helperText={\n                      touched.firstName && errors.firstName\n                        ? errors.firstName\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.lastName && Boolean(errors.lastName)}\n                    id='lastName'\n                    label='Last Name'\n                    value={values.lastName}\n                    placeholder='Fieri'\n                    helperText={\n                      touched.lastName && errors.lastName\n                        ? errors.lastName\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.password && Boolean(errors.password)}\n                    id='password'\n                    label='Password'\n                    value={values.password}\n                    type='password'\n                    placeholder=''\n                    helperText={\n                      touched.password && errors.password\n                        ? errors.password\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={\n                      touched.confirmPassword && Boolean(errors.confirmPassword)\n                    }\n                    id='confirmPassword'\n                    label='Confirm Password'\n                    value={values.confirmPassword}\n                    type='password'\n                    placeholder=''\n                    helperText={\n                      touched.confirmPassword && errors.confirmPassword\n                        ? errors.confirmPassword\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    color='default'\n                    disabled={isSubmitting}\n                    endIcon={<Icon>send</Icon>}>\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n",["178","179"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js",["180"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js",["181","182"],"import React, { useEffect, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport RecipeService from \"../services/recipe.service\";\nimport { SET_CURRENT_RECIPE, SET_FAVORITES, LOADING } from \"../utils/actions\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport Button from \"@material-ui/core/Button\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorderOutlined\";\nimport StarIcon from \"@material-ui/icons/Star\";\n\n// const correctDummyRecipeObj = {\n//     id: 6,\n//     imageLocation: \"https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-homemade-pita-0144-portrait-pf-1567692673.jpg\",\n//     title: \"Pita\",\n//     description: \"Round pita disks\",\n//     publicRecipe: true,\n//     ingredients: [\n//         {\n//             id: 16,\n//             amount: {\n//                 id: 17,\n//                 amount: \"1 clove crushed\",\n//                 ingredient: {\n//                     id: 1,\n//                     ingredient: \"Garlic\"\n//                 }\n//             }\n//         },\n//         {\n//             id: 15,\n//             amount: {\n//                 id: 16,\n//                 amount: \"2 tbsp\",\n//                 ingredient: {\n//                     id: 2,\n//                     ingredient: \"Salt\"\n//                 }\n//             }\n//         },\n//         {\n//             id: 14,\n//             amount: {\n//                 id: 15,\n//                 amount: \"4 cups\",\n//                 ingredient: {\n//                     id: 3,\n//                     ingredient: \"Flour\"\n//                 }\n//             }\n//         }\n//     ],\n//     instructions: [\n//         {\n//             id: 8,\n//             step: {\n//                 id: 6,\n//                 step: \"knead until smooth\"\n//             },\n//             stepOrder: 1\n//         },\n//         {\n//             id: 9,\n//             step: {\n//                 id: 7,\n//                 step: \"let rest for 45-90 min\"\n//             },\n//             stepOrder: 2\n//         },\n//         {\n//             id: 10,\n//             step: {\n//                 id: 8,\n//                 step: \"punch down dough\"\n//             },\n//             stepOrder: 3\n//         },\n//         {\n//             id: 11,\n//             step: {\n//                 id: 9,\n//                 step: \"spread dough out and cut into circles, place each on a greased cookie sheet\"\n//             },\n//             stepOrder: 4\n//         },\n//         {\n//             id: 12,\n//             step: {\n//                 id: 10,\n//                 step: \"bake at 375 for 27-30 min\"\n//             },\n//             stepOrder: 5\n//         }\n//     ],\n//     category: {\n//         id: 1,\n//         category: \"Bread\"\n//     }\n// }\n\n//Displays a chosen Recipe with id matching www.url.com/recipe/{id}\nconst Recipe = (props) => {\n  //Contains all Relevant Data for Recipe Display\n  const [state, dispatch] = useStoreContext();\n\n  //Contains Bool for whether Recipe is one of your favorites or not\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [favoriteId, setFavoriteId] = useState(0);\n\n  const getFavoriteId = () => {\n    if (state.favorites.length > 0) {\n      for (let i=0;i<state.favorites.length;i++)\n      {\n        if (state.favorites[i].recipe.id === state.currentRecipe.id){\n          console.log(\"setIsFavorite Before: \" + isFavorite);\n          setFavoriteId(state.favorites[i].id);\n          setIsFavorite(true);\n          console.log(\"setIsFavorite After: \" + isFavorite);\n        }\n      }\n    }\n    else {\n      setIsFavorite(false);\n    }\n  }\n  \n\n  //Loads the list of user's favorites\n  const setFavorites = () => {\n    dispatch({ type: LOADING, loading: true });\n    RecipeService.getFavoriteRecipes()\n      .then((res) => {\n        console.log(res);\n        dispatch({\n          type: SET_FAVORITES,\n          favorites: res.data,\n        });\n        getFavoriteId();\n      })\n      .catch((err) => {\n        console.log(err);\n        dispatch({ type: LOADING, loading: false });\n      });\n  };\n\n  //Loads the RecipeData for Display\n  const handleLoadRecipe = (recipeId) => {\n    RecipeService.getRecipeById(recipeId)\n      .then(res => {\n        console.log(res.data);\n        res.status === 200 && dispatch({\n          type: SET_CURRENT_RECIPE,\n          recipe: res.data\n        });\n        //Set the State's list of Favorites so we can check if this recipe is a favorite already\n        setFavorites();\n        //console.log(RecipeService.getCurrentRecipe());\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  //Adds Favorite to your Favorites\n  const handleAddFavorite = (recipeId) => {\n    console.log(\"Recipe ID: \" + recipeId);\n    RecipeService.postFavoriteRecipe(recipeId)\n      .then(res => {\n        console.log(res.data);\n        //Sets local state flag to true for Button Display\n        res.status === 201 && setIsFavorite(true);\n        setFavoriteId(res.data.id);\n        console.log(\"isFavorite: \" + isFavorite);\n      })\n      .catch(err => {\n        console.log(\"Recipe is already a favorite or server cannot be reached.\");\n        dispatch({ type: LOADING, loading: false });\n      });\n  };\n\n  //Removes Favorite from your Favorites\n  const handleRemoveFavorite = (recipeId) => {\n    dispatch({ type: LOADING, loading: true });\n    console.log(recipeId);\n    RecipeService.deleteFavoriteRecipe(recipeId)\n      .then((res) => {\n        console.log(res);\n        setIsFavorite(false);\n        dispatch({ type: LOADING, loading: false });\n      })\n      .catch((err) => {\n        console.log(err);\n        console.log(\"DELETE REQUEST, something went wrong\");\n        dispatch({ type: LOADING, loading: false });\n      });\n  };\n\n\n  //  useEffect to API get by ID etc...\n  useEffect(() => {\n    //Get {id} from URL\n    const recipeId = props.match.params.id;\n\n    //Load the Recipe from Back-end\n    handleLoadRecipe(recipeId);\n\n    //Check to see if current recipe is in our favorites\n\n  }, [] /*Empty Array Ensures Side Effects only occur once*/\n  );\n\n  //When finished, pull apart created JSON obj and display each component\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        {console.log(state.currentRecipe)}\n        {state.currentRecipe ?\n          <React.Fragment>\n            <h1>{state.currentRecipe.title}</h1>\n            <h3>Recipe #{state.currentRecipe.id}</h3>\n            <strong>Category:</strong> {state.currentRecipe.category.category}\n            <br /><img style={{ width: 30 + '%' }} src={\"http://images.generictech.org/\" + state.currentRecipe.imageLocation} />\n            <br />\n            {!state.loading ? \n              <React.Fragment>\n                {isFavorite ? (\n                  <Button onClick={() =>   handleRemoveFavorite(favoriteId)} startIcon={<StarIcon />}> Unfavorite</Button>\n                ) : (\n                  <Button onClick={() =>  handleAddFavorite(state.currentRecipe.id)}startIcon={<StarBorderIcon />}> Favorite</Button>\n                )}\n              </React.Fragment>\n              : <div>Loading</div>\n            }\n            {state.currentRecipe.description &&\n            <React.Fragment>\n              <h1>Description:</h1>\n              {state.currentRecipe.description}\n            </React.Fragment>\n            }\n            <div id=\"ingredients-list\">\n              <h1>Ingredients</h1>\n              <ul>\n                {state.currentRecipe.ingredients.map(ingredient => (\n                  <li key={ingredient.amount.ingredient.ingredient}>\n                    {ingredient.amount.amount} {ingredient.amount.ingredient.ingredient}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div id=\"instructions-list\">\n              <h1>Instructions</h1>\n              <ol>\n                {state.currentRecipe.instructions.map(instruction => (\n                  <li key={instruction.stepOrder}>\n                    {instruction.step.step}\n                  </li>\n                ))}\n              </ol>\n              <br /><br />\n            </div>\n          </React.Fragment>\n          : <div>\n            No Recipes Found.\n          </div>\n        }\n      </Paper>\n    </div>\n  );\n};\n\nexport default Recipe;","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js",["183","184"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js",["185","186","187"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js",["188"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",["189"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SET_RECIPE_DETAIL } from \"../../utils/actions\";\nimport CategoryService from \"../../services/category.service\";\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(5, \"Title must contain at least 5 characters\")\n    .required(\"Enter a recipe title\"),\n  imageLocation: Yup.string(),\n  description: Yup.string().required(\"Required\"),\n  isPublic: Yup.boolean(),\n  category: Yup.string().required(\"Select a recipe category\"),\n  categoryId: Yup.number()\n});\n\nconst RecipeForm = props => {\n  const [state, dispatch] = useStoreContext();\n  const [recipeCategory, setRecipeCategory] = useState([]);\n\n  const debug = true;\n  const {\n    editForm,\n    title,\n    imageLocation,\n    description,\n    isPublic,\n    category,\n    categoryId\n  } = props;\n\n  const recipeSubmit = (values, { setSubmitting }) => {\n    dispatch({\n      type: SET_RECIPE_DETAIL,\n      recipeDetail: values,\n    });\n    setSubmitting(false);\n  };\n\n  const capitalize = (s) => {\n    if (typeof s !== 'string') return ''\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  const getCategories = () => {\n    CategoryService.getAllCategories().then(res => {\n      console.log(res);\n      if (res.data.length > 0){\n        let categoryArr = res.data.map((categoryObj) => {\n          return {\n            value: categoryObj.category,\n            label: capitalize(categoryObj.category),\n            id: categoryObj.id\n          }\n        })\n        setRecipeCategory(categoryArr)\n      }\n    }).catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <Formik\n          initialValues={{\n            title: title || \"\",\n            imageLocation: imageLocation || \"\",\n            description: description || \"\",\n            isPublic: isPublic || false,\n            category: category || \"\",\n          }}\n          initialTouched={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          initialErrors={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          initialStatus={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={recipeSubmit}>\n          {({\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            isSubmitting,\n          }) => (\n            <Form\n              noValidate\n              autoComplete='off'\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h2'>\n                    {editForm ? \"Edit Recipe\" : \"Create Recipe\"}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.title && Boolean(errors.title)}\n                    id='title'\n                    label='Title'\n                    value={values.title}\n                    placeholder='Brown Butter Chicken'\n                    helperText={\n                      touched.title && errors.title ? errors.title : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    select\n                    id='category'\n                    name='category'\n                    label='Select a Category'\n                    margin='dense'\n                    variant='outlined'\n                    error={touched.category && Boolean(errors.category)}\n                    onChange={handleChange}\n                    value={values.category}\n                    helperText={\n                      touched.category && errors.category\n                        ? errors.category\n                        : \" \"\n                    }\n                    fullWidth>\n                    {recipeCategory.map(option => (\n                      <MenuItem key={option.value} value={option.id}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={\n                      touched.imageLocation && Boolean(errors.imageLocation)\n                    }\n                    id='imageLocation'\n                    label='Image URL'\n                    value={values.imageLocation}\n                    helperText={\n                      touched.imageLocation && errors.imageLocation\n                        ? errors.imageLocation\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.description && Boolean(errors.description)}\n                    id='description'\n                    label='Description'\n                    multiline\n                    rows={4}\n                    placeholder='A delicious and savory take on the classic...'\n                    value={values.description}\n                    helperText={\n                      touched.description && errors.description\n                        ? errors.description\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={values.isPublic}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        name='isPublic'\n                        inputProps={{ \"aria-label\": \"make public or private\" }}\n                      />\n                    }\n                    label={\n                      values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n                </Grid>\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    disabled={isSubmitting}\n                    endIcon={<NavigateNextIcon />}>\n                    Next\n                  </Button>\n                </Grid>\n              </Grid>\n              {debug && (\n                <>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Values</strong>\n                    <br />\n                    {JSON.stringify(state.recipeDetail, null, 2)}\n                  </pre>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Errors</strong>\n                    <br />\n                    {JSON.stringify(errors, null, 2)}\n                  </pre>\n                </>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </Paper>\n    </div>\n  );\n};\n\nexport default RecipeForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",["190","191"],"import React, { useEffect, useState } from \"react\";\nimport { Divider, Button, TextField } from \"@material-ui/core\";\nimport { FieldArray, Form, Formik, getIn } from \"formik\";\nimport * as Yup from \"yup\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SET_INGREDIENTS } from \"../../utils/actions\";\nimport IngredientService from \"../../services/ingredient.service\";\n\nconst validationSchema = Yup.object().shape({\n  ingredients: Yup.array().of(\n    Yup.object()\n      .shape({\n        ingredientName: Yup.string().required(\"Ingredient is required\"),\n        ingredientAmount: Yup.string().required(\"Amount is required\"),\n        ingredientId: Yup.number()\n      })\n      .test(\n        \"unique\",\n        \"Duplicate ingredient in list\",\n        function validateUnique(currentIngredient) {\n          const otherIngredients = this.parent.filter(\n            ingredient => ingredient !== currentIngredient\n          );\n          const isDuplicate = otherIngredients.some(\n            ingredient =>\n              ingredient.ingredientName === currentIngredient.ingredientName\n          );\n          return isDuplicate\n            ? this.createError({ path: `${this.path}.ingredientName` })\n            : true;\n        }\n      )\n  ),\n});\n\nconst debug = true;\n\nconst RecipeIngredients = ({ editForm }) => {\n\n  const [state, dispatch] = useStoreContext();\n  const [ingredientsAPI, setIngredientsAPI] = useState([\n    { id: 0, ingredientName: \"\" },\n  ]);\n\n  const ingredientSubmit = values => {\n\n    const parsedIngredients = values.ingredients.map(ingredient => {\n      return {\n        amount: {\n          amount: ingredient.ingredientAmount,\n          ingredient: {\n            id: ingredient.ingredientId\n          }\n        }\n      }\n    })\n    console.log(parsedIngredients)\n    dispatch({\n      type: SET_INGREDIENTS,\n      ingredients: parsedIngredients\n    })\n  };\n\n  const getIngredients = () => {\n    IngredientService.getAllIngredients()\n      .then(res => {\n        if (res.data.length > 0) {\n          const parsedIngredients = res.data.map(ingredientObj => {\n            return {\n              id: ingredientObj.id,\n              ingredientName: ingredientObj.ingredient,\n            };\n          });\n          setIngredientsAPI([...ingredientsAPI, ...parsedIngredients]);\n        }\n      })\n      .then(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getIngredients();\n  }, []);\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <Formik\n          initialValues={{\n            ingredients: [\n              {\n                ingredientName: \"\",\n                ingredientAmount: \"\",\n                ingredientId: 0\n              },\n            ],\n          }}\n          validationSchema={validationSchema}\n          onSubmit={ingredientSubmit}>\n          {({\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            isValid,\n            setFieldValue,\n          }) => (\n            <Form\n              noValidate\n              autoComplete='off'\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <FieldArray name='ingredients'>\n                {({ push, remove }) => (\n                  <Grid\n                    container\n                    direction='row'\n                    justify='center'\n                    alignItems='center'\n                    margin={4}>\n                    <Grid item>\n                      <Typography variant='h2'>\n                        {editForm ? \"Edit \" : \"Add \"}Ingredients\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                    </Grid>\n                    {values.ingredients.map((p, index) => {\n                      const ingredientName = `ingredients[${index}].ingredientName`;\n                      const touchedName = getIn(touched, ingredientName);\n                      const errorName = getIn(errors, ingredientName);\n\n                      const ingredientAmount = `ingredients[${index}].ingredientAmount`;\n                      const touchedAmount = getIn(touched, ingredientAmount);\n                      const errorAmount = getIn(errors, ingredientAmount);\n\n                      const ingredientId = `ingredients[${index}].ingredientId`;\n\n                      return (\n                        <Grid\n                          container\n                          direction='row'\n                          justify='center'\n                          alignItems='center'\n                          spacing={2}\n                          item\n                          xs={12}\n                          key={`key-${p}-${index}`}>\n                          <Grid item sm={6} xs={12}>\n                            <Autocomplete\n                              name={ingredientName}\n                              value={p.ingredientName}\n                              options={ingredientsAPI}\n                              getOptionSelected={(option, value) =>\n                                option.ingredientName === value\n                              }\n                              onOpen={handleBlur}\n                              getOptionLabel={option => {\n                                if (typeof option === \"string\") {\n                                  return option;\n                                }\n                                if (option.ingredientName) {\n                                  return option.ingredientName;\n                                }\n                                return option.ingredientName;\n                              }}\n                              onChange={(event, newValue) => {\n                                setFieldValue(\n                                  ingredientName,\n                                  newValue !== null\n                                    ? newValue.ingredientName\n                                    : \"\"\n                                );\n                                setFieldValue(ingredientId, newValue !== null ? newValue.id : 0)\n                              }}\n                              renderInput={params => (\n                                <TextField\n                                  {...params}\n                                  margin='dense'\n                                  label='Ingredient Name'\n                                  size='small'\n                                  error={Boolean(touchedName && errorName)}\n                                  helperText={\n                                    touchedName && errorName ? errorName : \" \"\n                                  }\n                                  fullWidth\n                                  variant='outlined'\n                                />\n                              )}\n                            />\n                          </Grid>\n                          <Grid item sm={1} />\n                          <Grid item sm={4} xs={12}>\n                            <TextField\n                              fullWidth\n                              margin='dense'\n                              variant='outlined'\n                              label='Amount'\n                              name={ingredientAmount}\n                              value={p.ingredientAmount}\n                              required\n                              helperText={\n                                touchedAmount && errorAmount ? errorAmount : \" \"\n                              }\n                              error={Boolean(touchedAmount && errorAmount)}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid item xs={1}>\n                            <IconButton\n                              aria-label='delete'\n                              disabled={index === 0}\n                              onClick={() => remove(index)}>\n                              <ClearIcon />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      );\n                    })}\n                    <Grid\n                      container\n                      direction='row'\n                      item\n                      justify='flex-end'\n                      alignItems='flex-end'>\n                      <Button\n                        type='button'\n                        variant='outlined'\n                        onClick={() =>\n                          push({\n                            id: Math.random(),\n                            ingredientName: \"\",\n                            ingredientAmount: \"\",\n                          })\n                        }>\n                        Add\n                      </Button>\n                    </Grid>\n                  </Grid>\n                )}\n              </FieldArray>\n              <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n              <Grid\n                container\n                direction='row'\n                justify='flex-end'\n                alignItems='flex-end'>\n                <Button\n                  type='submit'\n                  variant='outlined'\n                  // disabled={!isValid || values.ingredients.length === 0}\n                  endIcon={<NavigateNextIcon />}>\n                  next\n                </Button>\n              </Grid>\n              {debug && (\n                <>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>State Ingredients</strong>\n                    <br />\n                    {JSON.stringify(state.ingredients, null, 2)}\n                  </pre>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Errors</strong>\n                    <br />\n                    {JSON.stringify(errors, null, 2)}\n                  </pre>\n                </>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </Paper>\n    </div>\n  );\n};\n\nexport default RecipeIngredients;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js",["192"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js",["193","194","195"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js",["196","197","198","199"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js",["200","201"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js",["202"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js",["203"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\shoppinglist.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js",["204","205"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport IngredientService from \"../../services/ingredient.service\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport DebugData from \"../DebugData\";\nimport { SET_DB_INGREDIENTS } from \"../../utils/actions\";\n\nconst validationSchema = Yup.object().shape({\n  ingredient: Yup.string()\n    .min(5, \"Ingredient must contain at least 5 characters\")\n    .required(\"Enter a recipe ingredient\"),\n});\n\nconst AddNewIngredient = ({ ingredient, editForm }) => {\n  const [state, dispatch] = useStoreContext();\n\n  const debug = false;\n\n  const ingredientSubmit = (values, { setSubmitting, setFieldError }) => {\n    console.log(values);\n\n    IngredientService.postIngredient(values)\n      .then(res => {\n        console.log(res);\n        res.status === 201 &&\n          IngredientService.getAllIngredients().then(res => {\n            if (res.data.length > 0) {\n                const parsedIngredients = res.data.map(ingredientObj => {\n                  return {\n                    id: ingredientObj.id,\n                    ingredientName: ingredientObj.ingredient,\n                  };\n                });\n      \n                dispatch({\n                  type: SET_DB_INGREDIENTS,\n                  dbIngredients: [...[{ id: 0, ingredientName: \"\" }], ...parsedIngredients]\n                })\n              }\n          });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    setSubmitting(false);\n  };\n\n  return (\n    <div className='page-body-content'>\n      <Formik\n        initialValues={{\n          ingredient: ingredient || \"\",\n        }}\n        initialTouched={{\n          ingredient: false,\n        }}\n        initialErrors={{\n          ingredient: false,\n        }}\n        initialStatus={{\n          ingredient: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={ingredientSubmit}>\n        {({\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <Form noValidate autoComplete='off'>\n            <Paper\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h6'>\n                    Don't see an ingredient in our database?\n                  </Typography>\n                  <Typography variant='subtitle1'>\n                    feel free to add it below...\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.ingredient && Boolean(errors.ingredient)}\n                    id='ingredient'\n                    label='Ingredient'\n                    value={values.ingredient}\n                    placeholder='Sage'\n                    helperText={\n                      touched.ingredient && errors.ingredient\n                        ? errors.ingredient\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n                </Grid>\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    disabled={isSubmitting}\n                    endIcon={<NavigateNextIcon />}>\n                    Next\n                  </Button>\n                </Grid>\n              </Grid>\n              {debug && (\n                <DebugData values={state.ingredients} errors={errors} />\n              )}\n            </Paper>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default AddNewIngredient;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AuthMenu.js",["206"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutModal.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutForm.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\SideNav.js",[],{"ruleId":"207","severity":1,"message":"208","line":34,"column":10,"nodeType":"209","messageId":"210","endLine":34,"endColumn":15},{"ruleId":"207","severity":1,"message":"211","line":37,"column":59,"nodeType":"209","messageId":"210","endLine":37,"endColumn":67},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"207","severity":1,"message":"216","line":10,"column":17,"nodeType":"209","messageId":"210","endLine":10,"endColumn":25},{"ruleId":"217","severity":1,"message":"218","line":181,"column":6,"nodeType":"219","endLine":181,"endColumn":8,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":194,"column":19,"nodeType":"223","endLine":194,"endColumn":129},{"ruleId":"207","severity":1,"message":"224","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":17},{"ruleId":"207","severity":1,"message":"225","line":7,"column":21,"nodeType":"209","messageId":"210","endLine":7,"endColumn":33},{"ruleId":"207","severity":1,"message":"226","line":4,"column":29,"nodeType":"209","messageId":"210","endLine":4,"endColumn":39},{"ruleId":"207","severity":1,"message":"216","line":14,"column":17,"nodeType":"209","messageId":"210","endLine":14,"endColumn":25},{"ruleId":"217","severity":1,"message":"227","line":79,"column":6,"nodeType":"219","endLine":79,"endColumn":8,"suggestions":"228"},{"ruleId":"207","severity":1,"message":"208","line":8,"column":10,"nodeType":"209","messageId":"210","endLine":8,"endColumn":15},{"ruleId":"217","severity":1,"message":"227","line":79,"column":6,"nodeType":"219","endLine":79,"endColumn":8,"suggestions":"229"},{"ruleId":"207","severity":1,"message":"230","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"217","severity":1,"message":"231","line":91,"column":6,"nodeType":"219","endLine":91,"endColumn":8,"suggestions":"232"},{"ruleId":"217","severity":1,"message":"233","line":84,"column":6,"nodeType":"219","endLine":84,"endColumn":8,"suggestions":"234"},{"ruleId":"207","severity":1,"message":"235","line":5,"column":35,"nodeType":"209","messageId":"210","endLine":5,"endColumn":42},{"ruleId":"207","severity":1,"message":"236","line":9,"column":7,"nodeType":"209","messageId":"210","endLine":9,"endColumn":23},{"ruleId":"217","severity":1,"message":"237","line":297,"column":6,"nodeType":"219","endLine":297,"endColumn":8,"suggestions":"238"},{"ruleId":"207","severity":1,"message":"224","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":17},{"ruleId":"207","severity":1,"message":"208","line":13,"column":10,"nodeType":"209","messageId":"210","endLine":13,"endColumn":15},{"ruleId":"207","severity":1,"message":"239","line":46,"column":11,"nodeType":"209","messageId":"210","endLine":46,"endColumn":27},{"ruleId":"240","severity":1,"message":"241","line":54,"column":28,"nodeType":"242","messageId":"243","endLine":54,"endColumn":30},{"ruleId":"207","severity":1,"message":"244","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"230","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"217","severity":1,"message":"245","line":114,"column":6,"nodeType":"219","endLine":114,"endColumn":8,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":1,"column":1,"nodeType":"249","endLine":1,"endColumn":64},{"ruleId":"207","severity":1,"message":"244","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"230","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"216","line":21,"column":17,"nodeType":"209","messageId":"210","endLine":21,"endColumn":25},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'editForm' is assigned a value but never used.","no-native-reassign",["250"],"no-negated-in-lhs",["251"],"'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleLoadRecipe', 'props.match.params.id', and 'setFavorites'. Either include them or remove the dependency array.","ArrayExpression",["252"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","'authDispatch' is assigned a value but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["253"],["254"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getIngredients'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'getShoppingList'. Either include it or remove the dependency array.",["256"],"'LOADING' is defined but never used.","'dummyRecipeArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRecommended'. Either include it or remove the dependency array.",["257"],"'handleFormUpdate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.",["258"],"import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"261","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},"Update the dependencies array to be: [handleLoadRecipe, props.match.params.id, setFavorites]",{"range":"272","text":"273"},"Update the dependencies array to be: [getCategories]",{"range":"274","text":"275"},{"range":"276","text":"275"},"Update the dependencies array to be: [getIngredients]",{"range":"277","text":"278"},"Update the dependencies array to be: [getShoppingList]",{"range":"279","text":"280"},"Update the dependencies array to be: [setRecommended]",{"range":"281","text":"282"},"Update the dependencies array to be: [setFavorites]",{"range":"283","text":"284"},[5100,5102],"[handleLoadRecipe, props.match.params.id, setFavorites]",[2373,2375],"[getCategories]",[2392,2394],[2898,2900],"[getIngredients]",[2542,2544],"[getShoppingList]",[6465,6467],"[setRecommended]",[3276,3278],"[setFavorites]"]