[{"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js":"1","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js":"2","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js":"3","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js":"4","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js":"5","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js":"6","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js":"7","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js":"8","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js":"9","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js":"10","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js":"11","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js":"12","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js":"13","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js":"14","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js":"15","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js":"16","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js":"17","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js":"18","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js":"19","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js":"20","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js":"21","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js":"22","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js":"23","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js":"24","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js":"25","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js":"26","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js":"27","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js":"28","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js":"29","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js":"30","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js":"31","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js":"32","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js":"33","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js":"34","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js":"35","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\shoppinglist.service.js":"36","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js":"37","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js":"38","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AuthMenu.js":"39","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutModal.js":"40","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutForm.js":"41","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\SideNav.js":"42","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AddToShopList.js":"43"},{"size":457,"mtime":1608587344002,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"45"},{"size":2196,"mtime":1609715153390,"results":"47","hashOfConfig":"45"},{"size":11336,"mtime":1609726504199,"results":"48","hashOfConfig":"45"},{"size":2822,"mtime":1609713649074,"results":"49","hashOfConfig":"45"},{"size":2336,"mtime":1609721301444,"results":"50","hashOfConfig":"45"},{"size":322,"mtime":1608587343997,"results":"51","hashOfConfig":"45"},{"size":1166,"mtime":1609713649061,"results":"52","hashOfConfig":"45"},{"size":182,"mtime":1609192482180,"results":"53","hashOfConfig":"45"},{"size":1130,"mtime":1609722776590,"results":"54","hashOfConfig":"45"},{"size":1048,"mtime":1609364795628,"results":"55","hashOfConfig":"45"},{"size":4382,"mtime":1609721946022,"results":"56","hashOfConfig":"45"},{"size":164,"mtime":1609708418203,"results":"57","hashOfConfig":"45"},{"size":6371,"mtime":1609725374035,"results":"58","hashOfConfig":"45"},{"size":1152,"mtime":1609721827699,"results":"59","hashOfConfig":"45"},{"size":5219,"mtime":1609723665813,"results":"60","hashOfConfig":"45"},{"size":1094,"mtime":1609722227377,"results":"61","hashOfConfig":"45"},{"size":821,"mtime":1609713649076,"results":"62","hashOfConfig":"45"},{"size":495,"mtime":1609630075412,"results":"63","hashOfConfig":"45"},{"size":649,"mtime":1609608204142,"results":"64","hashOfConfig":"45"},{"size":9074,"mtime":1609713649044,"results":"65","hashOfConfig":"45"},{"size":6381,"mtime":1609713649055,"results":"66","hashOfConfig":"45"},{"size":10432,"mtime":1609713649051,"results":"67","hashOfConfig":"45"},{"size":3233,"mtime":1609713649048,"results":"68","hashOfConfig":"45"},{"size":963,"mtime":1608587343999,"results":"69","hashOfConfig":"45"},{"size":5914,"mtime":1609725953237,"results":"70","hashOfConfig":"45"},{"size":773,"mtime":1609630075431,"results":"71","hashOfConfig":"45"},{"size":2084,"mtime":1609722126174,"results":"72","hashOfConfig":"45"},{"size":1664,"mtime":1609713649071,"results":"73","hashOfConfig":"45"},{"size":2339,"mtime":1609721893239,"results":"74","hashOfConfig":"45"},{"size":1959,"mtime":1609708418203,"results":"75","hashOfConfig":"45"},{"size":6628,"mtime":1609708418202,"results":"76","hashOfConfig":"45"},{"size":1156,"mtime":1609713649069,"results":"77","hashOfConfig":"45"},{"size":121,"mtime":1609726249899,"results":"78","hashOfConfig":"45"},{"size":203,"mtime":1609608204140,"results":"79","hashOfConfig":"45"},{"size":1096,"mtime":1609724432153,"results":"80","hashOfConfig":"45"},{"size":443,"mtime":1609713649040,"results":"81","hashOfConfig":"45"},{"size":4901,"mtime":1609713649042,"results":"82","hashOfConfig":"45"},{"size":2520,"mtime":1609714964310,"results":"83","hashOfConfig":"45"},{"size":2093,"mtime":1609715614401,"results":"84","hashOfConfig":"45"},{"size":2029,"mtime":1609715734349,"results":"85","hashOfConfig":"45"},{"size":1818,"mtime":1609716313404,"results":"86","hashOfConfig":"45"},{"size":749,"mtime":1609725284418,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u01klj",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"101"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"101"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"101"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\index.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\reportWebVitals.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\App.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\UserAccountForm.js",["179","180"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\GlobalState.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Nav.js",["181","182"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemLink from \"./ListItemLink\";\nimport AuthMenu from \"./AuthMenu\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport SideNav from \"./SideNav\";\nimport Box from \"@material-ui/core/Box\";\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => {\n  const [state, dispatch] = useStoreContext();\n  return (\n    <Grid\n      container\n      direction='row'\n      justify='space-between'\n      alignItems='center'\n      component='nav'\n      p={5}>\n      {state.user ? (\n        <Grid item container direction='row' justify='flex-start' xs={8}>\n          <Box display={{ xs: \"inline\", md: \"none\" }}>\n            <SideNav />\n          </Box>\n          <Grid item>\n            <Link to={\"/\"}>\n              <img\n                alt='Home Nav'\n                src='./images/cutboard.png'\n                style={{ maxHeight: 55 }}\n              />\n            </Link>\n          </Grid>\n          <Grid item>\n            <Box display={{ xs: \"none\", md: \"block\" }}>\n              <Link to={\"/favorites\"}>\n              <img\n                alt='Favorites Nav'\n                src='./images/favorites.png'\n                style={{ maxHeight: 55 }}\n              />\n            </Link>\n            </Box>\n          </Grid>\n          <Grid item>\n            <Box display={{ xs: \"none\", md: \"block\" }}>\n              <Link to={\"/shoppinglist\"}>\n              <img\n                alt='Shopping List Nav'\n                src='./images/shoplist.png'\n                style={{ maxHeight: 55 }}\n              />\n            </Link>\n            </Box>\n          </Grid>\n          <Grid item>\n            <Box display={{ xs: \"none\", md: \"block\" }}>\n              <Link to={\"/search\"}>\n              <img\n                alt='Search Nav'\n                src='./images/search.png'\n                style={{ maxHeight: 55 }}\n              />\n            </Link>\n            </Box>\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid item>\n          <Link to={\"/\"}>\n          <img\n                alt='cutting board logo'\n                src='./images/cutboard.png'\n                style={{ maxHeight: 55 }}\n              />\n          </Link>\n        </Grid>\n      )}\n      <Grid item>\n        <AuthMenu />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Nav;\n",["183","184"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Footer.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\NewRecipe.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\UserAccount.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\ShoppingList.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\AuthContext.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Landing.js",["185"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Admin.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Recipe.js",["186","187"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Login.js",["188"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Search.js",["189","190","191","192"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\pages\\Favorites.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\utils\\actions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\Logout.js",["193"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\BaseRecipe.js",["194"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SET_RECIPE_DETAIL } from \"../../utils/actions\";\nimport CategoryService from \"../../services/category.service\";\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(5, \"Title must contain at least 5 characters\")\n    .required(\"Enter a recipe title\"),\n  imageLocation: Yup.string(),\n  description: Yup.string().required(\"Required\"),\n  isPublic: Yup.boolean(),\n  category: Yup.string().required(\"Select a recipe category\"),\n  categoryId: Yup.number()\n});\n\nconst RecipeForm = props => {\n  const [state, dispatch] = useStoreContext();\n  const [recipeCategory, setRecipeCategory] = useState([]);\n\n  const debug = true;\n  const {\n    editForm,\n    title,\n    imageLocation,\n    description,\n    isPublic,\n    category,\n    categoryId\n  } = props;\n\n  const recipeSubmit = (values, { setSubmitting }) => {\n    dispatch({\n      type: SET_RECIPE_DETAIL,\n      recipeDetail: values,\n    });\n    setSubmitting(false);\n  };\n\n  const capitalize = (s) => {\n    if (typeof s !== 'string') return ''\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  const getCategories = () => {\n    CategoryService.getAllCategories().then(res => {\n      console.log(res);\n      if (res.data.length > 0){\n        let categoryArr = res.data.map((categoryObj) => {\n          return {\n            value: categoryObj.category,\n            label: capitalize(categoryObj.category),\n            id: categoryObj.id\n          }\n        })\n        setRecipeCategory(categoryArr)\n      }\n    }).catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <Formik\n          initialValues={{\n            title: title || \"\",\n            imageLocation: imageLocation || \"\",\n            description: description || \"\",\n            isPublic: isPublic || false,\n            category: category || \"\",\n          }}\n          initialTouched={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          initialErrors={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          initialStatus={{\n            title: false,\n            imageLocation: false,\n            description: false,\n            isPublic: false,\n            category: false,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={recipeSubmit}>\n          {({\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            isSubmitting,\n          }) => (\n            <Form\n              noValidate\n              autoComplete='off'\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h2'>\n                    {editForm ? \"Edit Recipe\" : \"Create Recipe\"}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.title && Boolean(errors.title)}\n                    id='title'\n                    label='Title'\n                    value={values.title}\n                    placeholder='Brown Butter Chicken'\n                    helperText={\n                      touched.title && errors.title ? errors.title : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    select\n                    id='category'\n                    name='category'\n                    label='Select a Category'\n                    margin='dense'\n                    variant='outlined'\n                    error={touched.category && Boolean(errors.category)}\n                    onChange={handleChange}\n                    value={values.category}\n                    helperText={\n                      touched.category && errors.category\n                        ? errors.category\n                        : \" \"\n                    }\n                    fullWidth>\n                    {recipeCategory.map(option => (\n                      <MenuItem key={option.value} value={option.id}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={\n                      touched.imageLocation && Boolean(errors.imageLocation)\n                    }\n                    id='imageLocation'\n                    label='Image URL'\n                    value={values.imageLocation}\n                    helperText={\n                      touched.imageLocation && errors.imageLocation\n                        ? errors.imageLocation\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.description && Boolean(errors.description)}\n                    id='description'\n                    label='Description'\n                    multiline\n                    rows={4}\n                    placeholder='A delicious and savory take on the classic...'\n                    value={values.description}\n                    helperText={\n                      touched.description && errors.description\n                        ? errors.description\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={values.isPublic}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        name='isPublic'\n                        inputProps={{ \"aria-label\": \"make public or private\" }}\n                      />\n                    }\n                    label={\n                      values.isPublic ? \"Recipe is public\" : \"Recipe is private\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n                </Grid>\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    disabled={isSubmitting}\n                    endIcon={<NavigateNextIcon />}>\n                    Next\n                  </Button>\n                </Grid>\n              </Grid>\n              {debug && (\n                <>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Values</strong>\n                    <br />\n                    {JSON.stringify(state.recipeDetail, null, 2)}\n                  </pre>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Errors</strong>\n                    <br />\n                    {JSON.stringify(errors, null, 2)}\n                  </pre>\n                </>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </Paper>\n    </div>\n  );\n};\n\nexport default RecipeForm;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeInstructions.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\RecipeIngredients.js",["195","196"],"import React, { useEffect, useState } from \"react\";\nimport { Divider, Button, TextField } from \"@material-ui/core\";\nimport { FieldArray, Form, Formik, getIn } from \"formik\";\nimport * as Yup from \"yup\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SET_INGREDIENTS } from \"../../utils/actions\";\nimport IngredientService from \"../../services/ingredient.service\";\n\nconst validationSchema = Yup.object().shape({\n  ingredients: Yup.array().of(\n    Yup.object()\n      .shape({\n        ingredientName: Yup.string().required(\"Ingredient is required\"),\n        ingredientAmount: Yup.string().required(\"Amount is required\"),\n        ingredientId: Yup.number()\n      })\n      .test(\n        \"unique\",\n        \"Duplicate ingredient in list\",\n        function validateUnique(currentIngredient) {\n          const otherIngredients = this.parent.filter(\n            ingredient => ingredient !== currentIngredient\n          );\n          const isDuplicate = otherIngredients.some(\n            ingredient =>\n              ingredient.ingredientName === currentIngredient.ingredientName\n          );\n          return isDuplicate\n            ? this.createError({ path: `${this.path}.ingredientName` })\n            : true;\n        }\n      )\n  ),\n});\n\nconst debug = true;\n\nconst RecipeIngredients = ({ editForm }) => {\n\n  const [state, dispatch] = useStoreContext();\n  const [ingredientsAPI, setIngredientsAPI] = useState([\n    { id: 0, ingredientName: \"\" },\n  ]);\n\n  const ingredientSubmit = values => {\n\n    const parsedIngredients = values.ingredients.map(ingredient => {\n      return {\n        amount: {\n          amount: ingredient.ingredientAmount,\n          ingredient: {\n            id: ingredient.ingredientId\n          }\n        }\n      }\n    })\n    console.log(parsedIngredients)\n    dispatch({\n      type: SET_INGREDIENTS,\n      ingredients: parsedIngredients\n    })\n  };\n\n  const getIngredients = () => {\n    IngredientService.getAllIngredients()\n      .then(res => {\n        if (res.data.length > 0) {\n          const parsedIngredients = res.data.map(ingredientObj => {\n            return {\n              id: ingredientObj.id,\n              ingredientName: ingredientObj.ingredient,\n            };\n          });\n          setIngredientsAPI([...ingredientsAPI, ...parsedIngredients]);\n        }\n      })\n      .then(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getIngredients();\n  }, []);\n\n  return (\n    <div className='page-body-content'>\n      <Paper>\n        <Formik\n          initialValues={{\n            ingredients: [\n              {\n                ingredientName: \"\",\n                ingredientAmount: \"\",\n                ingredientId: 0\n              },\n            ],\n          }}\n          validationSchema={validationSchema}\n          onSubmit={ingredientSubmit}>\n          {({\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            isValid,\n            setFieldValue,\n          }) => (\n            <Form\n              noValidate\n              autoComplete='off'\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <FieldArray name='ingredients'>\n                {({ push, remove }) => (\n                  <Grid\n                    container\n                    direction='row'\n                    justify='center'\n                    alignItems='center'\n                    margin={4}>\n                    <Grid item>\n                      <Typography variant='h2'>\n                        {editForm ? \"Edit \" : \"Add \"}Ingredients\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                    </Grid>\n                    {values.ingredients.map((p, index) => {\n                      const ingredientName = `ingredients[${index}].ingredientName`;\n                      const touchedName = getIn(touched, ingredientName);\n                      const errorName = getIn(errors, ingredientName);\n\n                      const ingredientAmount = `ingredients[${index}].ingredientAmount`;\n                      const touchedAmount = getIn(touched, ingredientAmount);\n                      const errorAmount = getIn(errors, ingredientAmount);\n\n                      const ingredientId = `ingredients[${index}].ingredientId`;\n\n                      return (\n                        <Grid\n                          container\n                          direction='row'\n                          justify='center'\n                          alignItems='center'\n                          spacing={2}\n                          item\n                          xs={12}\n                          key={`key-${p}-${index}`}>\n                          <Grid item sm={6} xs={12}>\n                            <Autocomplete\n                              name={ingredientName}\n                              value={p.ingredientName}\n                              options={ingredientsAPI}\n                              getOptionSelected={(option, value) =>\n                                option.ingredientName === value\n                              }\n                              onOpen={handleBlur}\n                              getOptionLabel={option => {\n                                if (typeof option === \"string\") {\n                                  return option;\n                                }\n                                if (option.ingredientName) {\n                                  return option.ingredientName;\n                                }\n                                return option.ingredientName;\n                              }}\n                              onChange={(event, newValue) => {\n                                setFieldValue(\n                                  ingredientName,\n                                  newValue !== null\n                                    ? newValue.ingredientName\n                                    : \"\"\n                                );\n                                setFieldValue(ingredientId, newValue !== null ? newValue.id : 0)\n                              }}\n                              renderInput={params => (\n                                <TextField\n                                  {...params}\n                                  margin='dense'\n                                  label='Ingredient Name'\n                                  size='small'\n                                  error={Boolean(touchedName && errorName)}\n                                  helperText={\n                                    touchedName && errorName ? errorName : \" \"\n                                  }\n                                  fullWidth\n                                  variant='outlined'\n                                />\n                              )}\n                            />\n                          </Grid>\n                          <Grid item sm={1} />\n                          <Grid item sm={4} xs={12}>\n                            <TextField\n                              fullWidth\n                              margin='dense'\n                              variant='outlined'\n                              label='Amount'\n                              name={ingredientAmount}\n                              value={p.ingredientAmount}\n                              required\n                              helperText={\n                                touchedAmount && errorAmount ? errorAmount : \" \"\n                              }\n                              error={Boolean(touchedAmount && errorAmount)}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid item xs={1}>\n                            <IconButton\n                              aria-label='delete'\n                              disabled={index === 0}\n                              onClick={() => remove(index)}>\n                              <ClearIcon />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      );\n                    })}\n                    <Grid\n                      container\n                      direction='row'\n                      item\n                      justify='flex-end'\n                      alignItems='flex-end'>\n                      <Button\n                        type='button'\n                        variant='outlined'\n                        onClick={() =>\n                          push({\n                            id: Math.random(),\n                            ingredientName: \"\",\n                            ingredientAmount: \"\",\n                          })\n                        }>\n                        Add\n                      </Button>\n                    </Grid>\n                  </Grid>\n                )}\n              </FieldArray>\n              <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n              <Grid\n                container\n                direction='row'\n                justify='flex-end'\n                alignItems='flex-end'>\n                <Button\n                  type='submit'\n                  variant='outlined'\n                  // disabled={!isValid || values.ingredients.length === 0}\n                  endIcon={<NavigateNextIcon />}>\n                  next\n                </Button>\n              </Grid>\n              {debug && (\n                <>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>State Ingredients</strong>\n                    <br />\n                    {JSON.stringify(state.ingredients, null, 2)}\n                  </pre>\n                  <pre style={{ textAlign: \"left\" }}>\n                    <strong>Errors</strong>\n                    <br />\n                    {JSON.stringify(errors, null, 2)}\n                  </pre>\n                </>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </Paper>\n    </div>\n  );\n};\n\nexport default RecipeIngredients;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\FinalSubmit.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\ListItemLink.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\IngredientsList.js",["197"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\category.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceFrame.js",["198","199"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\recipe.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LoginForm.js",["200","201"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeGlanceCard.js",["202","203"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\FavoritesTable.js",["204"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\ingredient.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\api-url.js",["205"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\auth-header.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\services\\shoppinglist.service.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\DebugData.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\RecipeForms\\AddNewIngredient.js",["206","207"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport IngredientService from \"../../services/ingredient.service\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport DebugData from \"../DebugData\";\nimport { SET_DB_INGREDIENTS } from \"../../utils/actions\";\n\nconst validationSchema = Yup.object().shape({\n  ingredient: Yup.string()\n    .min(5, \"Ingredient must contain at least 5 characters\")\n    .required(\"Enter a recipe ingredient\"),\n});\n\nconst AddNewIngredient = ({ ingredient, editForm }) => {\n  const [state, dispatch] = useStoreContext();\n\n  const debug = false;\n\n  const ingredientSubmit = (values, { setSubmitting, setFieldError }) => {\n    console.log(values);\n\n    IngredientService.postIngredient(values)\n      .then(res => {\n        console.log(res);\n        res.status === 201 &&\n          IngredientService.getAllIngredients().then(res => {\n            if (res.data.length > 0) {\n                const parsedIngredients = res.data.map(ingredientObj => {\n                  return {\n                    id: ingredientObj.id,\n                    ingredientName: ingredientObj.ingredient,\n                  };\n                });\n      \n                dispatch({\n                  type: SET_DB_INGREDIENTS,\n                  dbIngredients: [...[{ id: 0, ingredientName: \"\" }], ...parsedIngredients]\n                })\n              }\n          });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    setSubmitting(false);\n  };\n\n  return (\n    <div className='page-body-content'>\n      <Formik\n        initialValues={{\n          ingredient: ingredient || \"\",\n        }}\n        initialTouched={{\n          ingredient: false,\n        }}\n        initialErrors={{\n          ingredient: false,\n        }}\n        initialStatus={{\n          ingredient: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={ingredientSubmit}>\n        {({\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <Form noValidate autoComplete='off'>\n            <Paper\n              style={{\n                maxWidth: 600,\n                margin: \"auto\",\n                marginTop: 30,\n                padding: 20,\n              }}>\n              <Grid\n                container\n                direction='row'\n                justify='center'\n                alignItems='center'>\n                <Grid item>\n                  <Typography variant='h6'>\n                    Don't see an ingredient in our database?\n                  </Typography>\n                  <Typography variant='subtitle1'>\n                    feel free to add it below...\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 10, marginBottom: 20 }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    margin='dense'\n                    size='small'\n                    error={touched.ingredient && Boolean(errors.ingredient)}\n                    id='ingredient'\n                    label='Ingredient'\n                    value={values.ingredient}\n                    placeholder='Sage'\n                    helperText={\n                      touched.ingredient && errors.ingredient\n                        ? errors.ingredient\n                        : \" \"\n                    }\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant='outlined'\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider style={{ marginTop: 20, marginBottom: 20 }} />\n                </Grid>\n                <Grid container item justify='flex-end' alignItems='flex-end'>\n                  <Button\n                    type='submit'\n                    variant='outlined'\n                    disabled={isSubmitting}\n                    endIcon={<NavigateNextIcon />}>\n                    Next\n                  </Button>\n                </Grid>\n              </Grid>\n              {debug && (\n                <DebugData values={state.ingredients} errors={errors} />\n              )}\n            </Paper>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default AddNewIngredient;\n","A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AuthMenu.js",["208"],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutModal.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\LogoutForm.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\SideNav.js",[],"A:\\DEV\\Revature\\Projects\\cuttingboard-frontend\\src\\components\\AddToShopList.js",[],{"ruleId":"209","severity":1,"message":"210","line":34,"column":10,"nodeType":"211","messageId":"212","endLine":34,"endColumn":15},{"ruleId":"209","severity":1,"message":"213","line":37,"column":59,"nodeType":"211","messageId":"212","endLine":37,"endColumn":67},{"ruleId":"209","severity":1,"message":"214","line":3,"column":8,"nodeType":"211","messageId":"212","endLine":3,"endColumn":20},{"ruleId":"209","severity":1,"message":"215","line":11,"column":17,"nodeType":"211","messageId":"212","endLine":11,"endColumn":25},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"209","severity":1,"message":"215","line":13,"column":17,"nodeType":"211","messageId":"212","endLine":13,"endColumn":25},{"ruleId":"220","severity":1,"message":"221","line":120,"column":6,"nodeType":"222","endLine":120,"endColumn":8,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":133,"column":19,"nodeType":"226","endLine":133,"endColumn":129},{"ruleId":"209","severity":1,"message":"215","line":10,"column":17,"nodeType":"211","messageId":"212","endLine":10,"endColumn":25},{"ruleId":"209","severity":1,"message":"227","line":4,"column":29,"nodeType":"211","messageId":"212","endLine":4,"endColumn":39},{"ruleId":"209","severity":1,"message":"215","line":15,"column":17,"nodeType":"211","messageId":"212","endLine":15,"endColumn":25},{"ruleId":"220","severity":1,"message":"228","line":80,"column":6,"nodeType":"222","endLine":80,"endColumn":8,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":162,"column":31,"nodeType":"232","endLine":162,"endColumn":35},{"ruleId":"209","severity":1,"message":"210","line":8,"column":10,"nodeType":"211","messageId":"212","endLine":8,"endColumn":15},{"ruleId":"220","severity":1,"message":"228","line":79,"column":6,"nodeType":"222","endLine":79,"endColumn":8,"suggestions":"233"},{"ruleId":"209","severity":1,"message":"234","line":1,"column":28,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"220","severity":1,"message":"235","line":91,"column":6,"nodeType":"222","endLine":91,"endColumn":8,"suggestions":"236"},{"ruleId":"220","severity":1,"message":"237","line":76,"column":6,"nodeType":"222","endLine":76,"endColumn":8,"suggestions":"238"},{"ruleId":"209","severity":1,"message":"239","line":5,"column":35,"nodeType":"211","messageId":"212","endLine":5,"endColumn":42},{"ruleId":"220","severity":1,"message":"240","line":31,"column":6,"nodeType":"222","endLine":31,"endColumn":8,"suggestions":"241"},{"ruleId":"209","severity":1,"message":"210","line":12,"column":10,"nodeType":"211","messageId":"212","endLine":12,"endColumn":15},{"ruleId":"242","severity":1,"message":"243","line":48,"column":28,"nodeType":"244","messageId":"245","endLine":48,"endColumn":30},{"ruleId":"209","severity":1,"message":"246","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":26},{"ruleId":"209","severity":1,"message":"234","line":1,"column":28,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"220","severity":1,"message":"247","line":114,"column":6,"nodeType":"222","endLine":114,"endColumn":8,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":2,"column":1,"nodeType":"251","endLine":2,"endColumn":54},{"ruleId":"209","severity":1,"message":"246","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":26},{"ruleId":"209","severity":1,"message":"234","line":1,"column":28,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"209","severity":1,"message":"215","line":21,"column":17,"nodeType":"211","messageId":"212","endLine":21,"endColumn":25},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'editForm' is assigned a value but never used.","'ListItemLink' is defined but never used.","'dispatch' is assigned a value but never used.","no-native-reassign",["252"],"no-negated-in-lhs",["253"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleLoadRecipe' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["254"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["255"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["256"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getIngredients'. Either include it or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'getShoppingList'. Either include it or remove the dependency array.",["258"],"'LOADING' is defined but never used.","React Hook useEffect has a missing dependency: 'setRecommended'. Either include it or remove the dependency array.",["259"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'setFavorites'. Either include it or remove the dependency array.",["260"],"import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"263","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [handleLoadRecipe, props.match.params.id]",{"range":"274","text":"275"},"Update the dependencies array to be: [getCategories]",{"range":"276","text":"277"},{"range":"278","text":"277"},"Update the dependencies array to be: [getIngredients]",{"range":"279","text":"280"},"Update the dependencies array to be: [getShoppingList]",{"range":"281","text":"282"},"Update the dependencies array to be: [setRecommended]",{"range":"283","text":"284"},"Update the dependencies array to be: [setFavorites]",{"range":"285","text":"286"},[3872,3874],"[handleLoadRecipe, props.match.params.id]",[2442,2444],"[getCategories]",[2392,2394],[2898,2900],"[getIngredients]",[2478,2480],"[getShoppingList]",[989,991],"[setRecommended]",[3276,3278],"[setFavorites]"]